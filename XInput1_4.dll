int64_t sub_180001000()
{
    sub_180002340();
    /* tailcall */
    return atexit(sub_180005570);
}

struct std::exception::VTable** std::_Parallelism_resources_exhausted::_Parallelism_resources_exhausted(struct std::exception::VTable** arg1, void* arg2)
{
    *arg1 = &std::exception::`vftable';
    *(arg1 + 8) = {0};
    __std_exception_copy(arg2 + 8, &arg1[1]);
    return arg1;
}

void* const sub_180001060(void* arg1)
{
    void* result = *(arg1 + 8);
    
    if (result)
        return result;
    
    return "Unknown exception";
}

struct std::exception::VTable** std::exception::`scalar deleting destructor'(struct std::exception::VTable** arg1, char arg2)
{
    *arg1 = &std::exception::`vftable';
    __std_exception_destroy(&arg1[1]);
    
    if (arg2 & 1)
        sub_180004190(arg1);
    
    return arg1;
}

int64_t std::exception::~exception(struct std::exception::VTable** arg1)
{
    *arg1 = &std::exception::`vftable';
    /* tailcall */
    return __std_exception_destroy(&arg1[1]);
}

struct std::exception::std::bad_array_new_length::VTable** sub_1800010f0(struct std::exception::std::bad_array_new_length::VTable** arg1)
{
    arg1[2] = 0;
    arg1[1] = "bad array new length";
    *arg1 = &std::bad_array_new_length::`vftable'{for `std::exception'};
    return arg1;
}

void stdext::threads::_Throw_lock_error() __noreturn
{
    void pExceptionObject;
    sub_1800010f0(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, &data_1800078c8);
    /* no return */
}

struct std::exception::VTable** sub_180001140(struct std::exception::VTable** arg1, void* arg2)
{
    *arg1 = &std::exception::`vftable';
    *(arg1 + 8) = {0};
    __std_exception_copy(arg2 + 8, &arg1[1]);
    *arg1 = &std::bad_array_new_length::`vftable'{for `std::exception'};
    return arg1;
}

struct std::exception::VTable** sub_180001180(struct std::exception::VTable** arg1, void* arg2)
{
    *arg1 = &std::exception::`vftable';
    *(arg1 + 8) = {0};
    __std_exception_copy(arg2 + 8, &arg1[1]);
    *arg1 = &std::bad_alloc::`vftable'{for `std::exception'};
    return arg1;
}

void sub_1800011c0() __noreturn
{
    std::_Xlength_error("string too long");
    /* no return */
}

void sub_1800011e0(void* arg1)
{
    if (!*(arg1 + 8))
        return;
    
    terminate();
    /* no return */
}

uint64_t sub_180001200(int64_t arg1, wchar16* arg2)
{
    void var_278;
    int64_t rax_1 = __security_cookie ^ &var_278;
    uint64_t result;
    
    if (arg2)
    {
        int32_t result_1 = 0;
        int32_t rbx_1 = 0;
        HANDLE rax_2 = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
        int32_t lppe = 0x238;
        
        if (Process32FirstW(rax_2, &lppe))
        {
            BOOL i;
            
            do
            {
                int32_t var_23c;
                void _String1;
                
                if (!_wcsicmp(&_String1, arg2) && var_23c > rbx_1)
                {
                    int32_t result_2;
                    result_1 = result_2;
                    rbx_1 = var_23c;
                }
                
                i = Process32NextW(rax_2, &lppe);
            } while (i);
        }
        
        CloseHandle(rax_2);
        result = result_1;
    }
    else
        result = 0;
    
    __security_check_cookie(rax_1 ^ &var_278);
    return result;
}

wchar16 const* const LoadSearchPath()
{
    void var_288;
    int64_t rax_1 = __security_cookie ^ &var_288;
    wchar16* result_1 = nullptr;
    int32_t rdi = 0;
    int32_t rbx = 0;
    HANDLE rax_2 = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    int32_t lppe = 0x238;
    int32_t var_260;
    int32_t var_24c;
    void _String1;
    
    if (Process32FirstW(rax_2, &lppe))
    {
        BOOL i;
        
        do
        {
            if (!_wcsicmp(&_String1, u"HD-Player.exe") && var_24c > rbx)
            {
                rdi = var_260;
                rbx = var_24c;
            }
            
            i = Process32NextW(rax_2, &lppe);
        } while (i);
    }
    
    CloseHandle(rax_2);
    wchar16 const* const result;
    
    if (!rdi)
    {
        int32_t rdi_1 = 0;
        int32_t rbx_1 = 0;
        HANDLE rax_6 = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
        lppe = 0x238;
        
        if (Process32FirstW(rax_6, &lppe))
        {
            BOOL i_1;
            
            do
            {
                if (!_wcsicmp(&_String1, u"LdVBoxHeadless.exe") && var_24c > rbx_1)
                {
                    rdi_1 = var_260;
                    rbx_1 = var_24c;
                }
                
                i_1 = Process32NextW(rax_6, &lppe);
            } while (i_1);
        }
        
        CloseHandle(rax_6);
        
        if (!rdi_1)
        {
            int32_t rdi_2 = 0;
            int32_t rbx_2 = 0;
            HANDLE rax_10 = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
            lppe = 0x238;
            
            if (Process32FirstW(rax_10, &lppe))
            {
                BOOL i_2;
                
                do
                {
                    if (!_wcsicmp(&_String1, u"MEmuHeadless.exe") && var_24c > rbx_2)
                    {
                        rdi_2 = var_260;
                        rbx_2 = var_24c;
                    }
                    
                    i_2 = Process32NextW(rax_10, &lppe);
                } while (i_2);
            }
            
            CloseHandle(rax_10);
            
            if (!rdi_2)
            {
                int32_t rdi_3 = 0;
                int32_t rbx_3 = 0;
                HANDLE rax_14 = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
                lppe = 0x238;
                
                if (Process32FirstW(rax_14, &lppe))
                {
                    BOOL i_3;
                    
                    do
                    {
                        if (!_wcsicmp(&_String1, u"AndroidProcess.exe") && var_24c > rbx_3)
                        {
                            rdi_3 = var_260;
                            rbx_3 = var_24c;
                        }
                        
                        i_3 = Process32NextW(rax_14, &lppe);
                    } while (i_3);
                }
                
                CloseHandle(rax_14);
                
                if (!rdi_3)
                {
                    int32_t rdi_4 = 0;
                    int32_t rbx_4 = 0;
                    HANDLE rax_18 = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
                    lppe = 0x238;
                    
                    if (Process32FirstW(rax_18, &lppe))
                    {
                        BOOL i_4;
                        
                        do
                        {
                            if (!_wcsicmp(&_String1, u"aow_exe.exe") && var_24c > rbx_4)
                            {
                                rdi_4 = var_260;
                                rbx_4 = var_24c;
                            }
                            
                            i_4 = Process32NextW(rax_18, &lppe);
                        } while (i_4);
                    }
                    
                    CloseHandle(rax_18);
                    
                    if (!rdi_4)
                    {
                        int32_t rdi_5 = 0;
                        int32_t rbx_5 = 0;
                        HANDLE rax_22 = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
                        lppe = 0x238;
                        
                        if (Process32FirstW(rax_22, &lppe))
                        {
                            BOOL i_5;
                            
                            do
                            {
                                if (!_wcsicmp(&_String1, u"NoxVMHandle.exe") && var_24c > rbx_5)
                                {
                                    rdi_5 = var_260;
                                    rbx_5 = var_24c;
                                }
                                
                                i_5 = Process32NextW(rax_22, &lppe);
                            } while (i_5);
                        }
                        
                        CloseHandle(rax_22);
                        
                        if (rdi_5)
                            result_1 = u"NoxVMHandle.exe";
                        
                        result = result_1;
                    }
                    else
                        result = u"aow_exe.exe";
                }
                else
                    result = u"AndroidProcess.exe";
            }
            else
                result = u"MEmuHeadless.exe";
        }
        else
            result = u"LdVBoxHeadless.exe";
    }
    else
        result = u"HD-Player.exe";
    
    __security_check_cookie(rax_1 ^ &var_288);
    return result;
}

uint64_t sub_180001650()
{
    void var_c8;
    int64_t rax_1 = __security_cookie ^ &var_c8;
    sub_180002da0(&data_180009770);
    sub_180002da0(&data_1800097f0);
    sub_180002da0(&data_1800097b0);
    sub_180002da0(&data_180009830);
    wchar16* rax_2;
    int64_t rcx;
    rax_2 = LoadSearchPath();
    uint64_t result = sub_180001200(rcx, rax_2);
    
    if (result)
    {
        data_180009760 = result;
        result = OpenProcess(PROCESS_ALL_ACCESS, 0, result);
        data_180009768 = result;
        
        if (result)
        {
            void lpSystemInfo;
            int64_t rcx_2 = GetSystemInfo(&lpSystemInfo);
            int64_t rax_3 = data_1800098b0;
            
            if (rax_3 != data_1800098b8)
                data_1800098b8 = rax_3;
            
            int64_t var_40;
            int64_t var_38;
            sub_1800018b0(rcx_2, var_40, var_38, data_1800098c8, &data_1800098b0);
            int64_t rcx_3 = data_1800098b0;
            int64_t rax_4 = data_1800098b8;
            
            if (rcx_3 != rax_4)
            {
                int64_t i = 0;
                
                if ((rax_4 - rcx_3) >> 3)
                {
                    do
                    {
                        uint64_t* lpNumberOfBytesRead = nullptr;
                        int64_t lpBaseAddress = *(rcx_3 + (i << 3)) + 0x2c;
                        HANDLE hProcess = data_180009768;
                        int64_t lpBaseAddress_2 = *(rcx_3 + (i << 3)) + 0x28;
                        int64_t lpBaseAddress_1 = lpBaseAddress_2;
                        int32_t lpBuffer_1;
                        ReadProcessMemory(hProcess, lpBaseAddress_2, &lpBuffer_1, 4, lpNumberOfBytesRead);
                        uint64_t* lpNumberOfBytesRead_1 = nullptr;
                        void var_98;
                        void* rcx_4 = *sub_180003630(&data_180009770, &var_98, &lpBaseAddress_1);
                        *(rcx_4 + 0x18) = lpBuffer_1;
                        int32_t lpBuffer;
                        ReadProcessMemory(data_180009768, lpBaseAddress, &lpBuffer, 4, lpNumberOfBytesRead_1);
                        uint64_t* lpNumberOfBytesWritten = nullptr;
                        void var_88;
                        void* rcx_6 = *sub_180003630(&data_1800097b0, &var_88, &lpBaseAddress);
                        *(rcx_6 + 0x18) = lpBuffer;
                        WriteProcessMemory(data_180009768, lpBaseAddress_1, &lpBuffer, 4, lpNumberOfBytesWritten);
                        uint64_t* lpNumberOfBytesWritten_1 = nullptr;
                        void var_78;
                        void* rcx_8 = *sub_180003630(&data_1800097f0, &var_78, &lpBaseAddress_1);
                        *(rcx_8 + 0x18) = lpBuffer;
                        WriteProcessMemory(data_180009768, lpBaseAddress, &lpBuffer_1, 4, lpNumberOfBytesWritten_1);
                        i += 1;
                        void var_68;
                        void* rcx_10 = *sub_180003630(&data_180009830, &var_68, &lpBaseAddress);
                        *(rcx_10 + 0x18) = lpBuffer_1;
                        rcx_3 = data_1800098b0;
                    } while (i < (data_1800098b8 - rcx_3) >> 3);
                }
            }
            
            result = CloseHandle(data_180009768);
        }
    }
    
    __security_check_cookie(rax_1 ^ &var_c8);
    return result;
}

uint64_t sub_1800018b0(int64_t arg1, int64_t arg2, int64_t arg3, char* arg4, int64_t* arg5)
{
    void var_e8;
    int64_t rax_1 = __security_cookie ^ &var_e8;
    int64_t lpAddress = arg2;
    int128_t s;
    __builtin_memset(&s, 0, 0x18);
    int64_t r12 = 0;
    int64_t var_b0 = 0;
    int64_t var_80 = 0x1000;
    uint64_t j = _msize(arg4);
    int64_t lpBuffer;
    uint64_t result = VirtualQueryEx(data_180009768, lpAddress, &lpBuffer, 0x30);
    int128_t* r13 = *s[8];
    int64_t lpBuffer_1;
    
    if (result)
    {
        while (lpAddress < arg3)
        {
            int32_t var_78;
            int32_t var_74;
            
            if (var_78 == 0x1000 && !TEST_BITD(var_74, 8) && var_74 != 1)
            {
                lpBuffer_1 = lpBuffer;
                int64_t var_a0_1 = var_80;
                
                if (r13 == r12)
                {
                    sub_180003da0(&s, r13, &lpBuffer_1);
                    int64_t var_58;
                    r12 = var_58;
                    var_b0 = r12;
                    r13 = *s[8];
                }
                else
                {
                    *r13 = lpBuffer_1;
                    r13 = &r13[1];
                    *s[8] = r13;
                }
            }
            
            lpAddress = lpBuffer + var_80;
            
            if (!VirtualQueryEx(data_180009768, lpAddress, &lpBuffer, 0x30))
                break;
        }
    }
    
    int64_t* rcx_14 = s;
    int64_t* r12_1 = rcx_14;
    
    if (rcx_14 != r13)
    {
        do
        {
            int64_t var_50 = 0;
            int64_t rax_5 = j_operator new(r12_1[1]);
            memset(rax_5, 0, r12_1[1]);
            ZwReadVirtualMemory(data_180009768, *r12_1, rax_5, r12_1[1], &var_50);
            int64_t rdi_2 = var_50;
            
            if (rdi_2 > 0)
            {
                int64_t rsi_1 = 0;
                uint64_t r10_1 = 0;
                
                if (rdi_2)
                {
                    do
                    {
                        if (j)
                        {
                            char* rdx_4 = arg4;
                            int64_t r8_6 = -(arg4);
                            
                            while (true)
                            {
                                char rax_6 = *rdx_4;
                                
                                if (*(rax_5 - arg4 + r10_1 + rdx_4) != rax_6 && rax_6 != 0x3f)
                                    goto label_180001a88;
                                
                                if (&rdx_4[r8_6] == j - 1)
                                {
                                    if (r10_1 != 0xffffffff)
                                    {
                                        label_180001aa6:
                                        int64_t rsi_2 = rsi_1 + r10_1;
                                        int64_t lpBuffer_2 = *r12_1 + rsi_2;
                                        lpBuffer_1 = lpBuffer_2;
                                        int64_t* rdx_5 = arg5[1];
                                        
                                        if (rdx_5 == arg5[2])
                                            sub_180003f30(arg5, rdx_5, &lpBuffer_1);
                                        else
                                        {
                                            *rdx_5 = lpBuffer_2;
                                            arg5[1] += 8;
                                        }
                                        
                                        rsi_1 = rsi_2 + j;
                                        int64_t i = 0;
                                        int64_t r11_4 = var_50 - rsi_1;
                                        
                                        if (r11_4 != j)
                                        {
                                            do
                                            {
                                                char* rax_10 = arg4;
                                                int64_t r8_9 = -(arg4);
                                                
                                                do
                                                {
                                                    char rcx_10 = *rax_10;
                                                    
                                                    if (*(rsi_1 + rax_5 - arg4 + i + rax_10) != rcx_10 && rcx_10 != 0x3f)
                                                        break;
                                                    
                                                    if (&rax_10[r8_9] == j - 1)
                                                    {
                                                        r10_1 = i;
                                                        
                                                        if (i != 0xffffffff)
                                                            goto label_180001aa6;
                                                        
                                                        goto label_180001b40;
                                                    }
                                                    
                                                    rax_10 = &rax_10[1];
                                                } while (&rax_10[r8_9] < j);
                                                
                                                i += 1;
                                            } while (i < r11_4 - j);
                                        }
                                        
                                        label_180001b40:
                                        r13 = *s[8];
                                    }
                                    
                                    break;
                                }
                                
                                rdx_4 = &rdx_4[1];
                                
                                if (&rdx_4[r8_6] >= j)
                                    goto label_180001a88;
                            }
                            
                            break;
                        }
                        
                        label_180001a88:
                        r10_1 += 1;
                    } while (r10_1 < rdi_2);
                }
            }
            
            sub_180004190(rax_5);
            r12_1 = &r12_1[2];
        } while (r12_1 != r13);
        
        rcx_14 = s;
    }
    
    if (rcx_14)
    {
        int64_t* rax_11 = rcx_14;
        
        if (((var_b0 - rcx_14) & 0xfffffffffffffff0) >= 0x1000)
        {
            rcx_14 = rcx_14[-1];
            
            if (rax_11 - rcx_14 - 8 > 0x1f)
            {
                _invalid_parameter_noinfo_noreturn();
                /* no return */
            }
        }
        
        sub_180004190(rcx_14);
    }
    
    result = 1;
    __security_check_cookie(rax_1 ^ &var_e8);
    return result;
}

int128_t* sub_180001bd0(int128_t* arg1, void** arg2)
{
    void var_498;
    int64_t rax_1 = __security_cookie ^ &var_498;
    void** lpszUrl = arg2;
    int128_t* lpdwNumberOfBytesRead = arg1;
    int64_t hInternet = InternetOpenW(u"HTTP", 1, nullptr, nullptr, 0);
    
    if (hInternet)
    {
        if (lpszUrl[3] > 0xf)
            lpszUrl = *lpszUrl;
        
        int64_t rax_3 = InternetOpenUrlA(hInternet, lpszUrl, nullptr, 0, 0x80000000, 0);
        
        if (!rax_3)
        {
            std::ostream::operator<<(sub_180003410(std::cerr, "Failed to open URL."), sub_1800035f0);
            InternetCloseHandle(hInternet);
            goto label_180001c4e;
        }
        
        lpdwNumberOfBytesRead = 0;
        int128_t var_458 = {0};
        void* var_448_1 = nullptr;
        int64_t var_440_1 = 0xf;
        var_458 = 0;
        void lpBuffer;
        BOOL rax_5;
        int64_t r8_1;
        rax_5 = InternetReadFile(rax_3, &lpBuffer, 0x3ff, &lpdwNumberOfBytesRead);
        
        if (rax_5)
        {
            BOOL i;
            
            do
            {
                uint64_t rax_6 = lpdwNumberOfBytesRead;
                
                if (!rax_6)
                    break;
                
                if (rax_6 >= 0x400)
                {
                    sub_180004680();
                    /* no return */
                }
                
                *(&lpBuffer + rax_6) = 0;
                char* rbx = -ffffffffffffffff;
                
                do
                    rbx = &rbx[1];
                 while (*(&lpBuffer + rbx));
                
                void* rcx_7 = var_448_1;
                
                if (rbx > var_440_1 - rcx_7)
                {
                    uint32_t var_478_1;
                    var_478_1 = rbx;
                    sub_1800039a0(&var_458, rbx, r8_1, &lpBuffer, var_478_1);
                }
                else
                {
                    var_448_1 = rcx_7 + rbx;
                    int128_t* rdi_1 = &var_458;
                    
                    if (var_440_1 > 0xf)
                        rdi_1 = var_458;
                    
                    void* rdi_2 = rdi_1 + rcx_7;
                    memmove(rdi_2, &lpBuffer, rbx);
                    *(rbx + rdi_2) = 0;
                }
                
                i = InternetReadFile(rax_3, &lpBuffer, 0x3ff, &lpdwNumberOfBytesRead);
            } while (i);
        }
        
        InternetCloseHandle(rax_3);
        InternetCloseHandle(hInternet);
        *arg1 = var_458;
        arg1[1] = var_448_1;
    }
    else
    {
        std::ostream::operator<<(sub_180003410(std::cerr, "Failed to initialize WinINet."), sub_1800035f0);
        label_180001c4e:
        *arg1 = {0};
        arg1[1] = 0;
        *(arg1 + 0x18) = 0xf;
        *arg1 = 0;
    }
    
    __security_check_cookie(rax_1 ^ &var_498);
    return arg1;
}

int128_t* sub_180001e20(int128_t* arg1)
{
    void var_a8;
    int64_t rax_1 = __security_cookie ^ &var_a8;
    HLOCAL var_68 = arg1;
    HANDLE var_70 = nullptr;
    
    if (OpenProcessToken(GetCurrentProcess(), TOKEN_QUERY, &var_70))
    {
        int32_t ReturnLength = 0;
        GetTokenInformation(var_70, TokenUser, nullptr, 0, &ReturnLength);
        
        if (GetLastError() != ERROR_INSUFFICIENT_BUFFER)
        {
            std::ostream::operator<<(sub_180003410(std::cerr, "Failed to get token information …"), sub_1800035f0);
            CloseHandle(var_70);
            goto label_180001e9e;
        }
        
        uint64_t ReturnLength_1 = ReturnLength;
        uint64_t count = ReturnLength_1;
        int128_t s;
        __builtin_memset(&s, 0, 0x18);
        void* rsi_1 = nullptr;
        int64_t* TokenInformation;
        
        if (!ReturnLength_1)
            TokenInformation = nullptr;
        else
        {
            if (ReturnLength_1 < 0x1000)
                TokenInformation = operator new(count);
            else
            {
                if (ReturnLength_1 + 0x27 <= ReturnLength_1)
                {
                    stdext::threads::_Throw_lock_error();
                    /* no return */
                }
                
                int64_t rax_7 = operator new(ReturnLength_1 + 0x27);
                
                if (!rax_7)
                {
                    _invalid_parameter_noinfo_noreturn();
                    /* no return */
                }
                
                TokenInformation = (rax_7 + 0x27) & 0xffffffffffffffe0;
                TokenInformation[-1] = rax_7;
            }
            
            s = TokenInformation;
            rsi_1 = TokenInformation + count;
            void* var_50_1 = rsi_1;
            memset(TokenInformation, 0, count);
            void* var_58_1 = rsi_1;
            ReturnLength_1 = ReturnLength;
        }
        
        if (GetTokenInformation(var_70, TokenUser, TokenInformation, ReturnLength_1, &ReturnLength))
        {
            var_68 = nullptr;
            
            if (ConvertSidToStringSidA(*TokenInformation, &var_68))
            {
                int128_t var_48;
                sub_180002f80(&var_48, var_68);
                LocalFree(var_68);
                CloseHandle(var_70);
                *arg1 = var_48;
                int128_t var_38;
                arg1[1] = var_38;
                int64_t* TokenInformation_2 = TokenInformation;
                
                if (rsi_1 - TokenInformation < 0x1000)
                    sub_180004190(TokenInformation);
                else
                {
                    TokenInformation = TokenInformation[-1];
                    
                    if (TokenInformation_2 - TokenInformation - 8 > 0x1f)
                    {
                        _invalid_parameter_noinfo_noreturn();
                        /* no return */
                    }
                    
                    sub_180004190(TokenInformation);
                }
            }
            else
            {
                std::ostream::operator<<(sub_180003410(std::cerr, "Failed to convert SID to string."), sub_1800035f0);
                CloseHandle(var_70);
                *arg1 = {0};
                arg1[1] = 0;
                *(arg1 + 0x18) = 0xf;
                *arg1 = 0;
                label_180001ffd:
                int64_t* TokenInformation_1 = TokenInformation;
                
                if (rsi_1 - TokenInformation < 0x1000)
                    sub_180004190(TokenInformation);
                else
                {
                    TokenInformation = TokenInformation[-1];
                    
                    if (TokenInformation_1 - TokenInformation - 8 > 0x1f)
                    {
                        _invalid_parameter_noinfo_noreturn();
                        /* no return */
                    }
                    
                    sub_180004190(TokenInformation);
                }
            }
        }
        else
        {
            std::ostream::operator<<(sub_180003410(std::cerr, "Failed to get token information."), sub_1800035f0);
            CloseHandle(var_70);
            *arg1 = {0};
            arg1[1] = 0;
            *(arg1 + 0x18) = 0xf;
            *arg1 = 0;
            
            if (TokenInformation)
                goto label_180001ffd;
        }
    }
    else
    {
        std::ostream::operator<<(sub_180003410(std::cerr, "Failed to open process token."), sub_1800035f0);
        label_180001e9e:
        *arg1 = {0};
        arg1[1] = 0;
        *(arg1 + 0x18) = 0xf;
        *arg1 = 0;
    }
    
    __security_check_cookie(rax_1 ^ &var_a8);
    return arg1;
}

uint64_t sub_180002120(void** arg1)
{
    void var_98;
    int64_t rax_1 = __security_cookie ^ &var_98;
    char* buffer2_2;
    sub_180001e20(&buffer2_2);
    char* buffer2_1 = buffer2_2;
    uint64_t count;
    int64_t var_58;
    void** buffer1;
    
    if (count)
    {
        int64_t* var_50;
        sub_180001bd0(&var_50, arg1);
        int64_t* rbp_1 = var_50;
        int64_t var_40;
        int64_t var_38;
        
        if (var_40)
        {
            char* buffer2 = &buffer2_2;
            
            if (var_58 > 0xf)
                buffer2 = buffer2_1;
            
            int64_t* r15_1 = &var_50;
            
            if (var_38 > 0xf)
                r15_1 = rbp_1;
            
            if (count > var_40)
            {
                label_180002241:
                std::ostream::operator<<(sub_180003410(std::cerr, "Authorization failed. Invalid SI…"), sub_1800035f0);
                buffer1 = 0;
            }
            else
            {
                void* rax_6 = var_40 - count + 1 + r15_1;
                uint64_t buffer1_1 = memchr(r15_1, *buffer2, rax_6 - r15_1);
                buffer1 = buffer1_1;
                
                if (!buffer1_1)
                    goto label_180002241;
                
                while (memcmp(buffer1, buffer2, count))
                {
                    uint64_t buffer1_2 = memchr(buffer1 + 1, *buffer2, rax_6 - (buffer1 + 1));
                    buffer1 = buffer1_2;
                    
                    if (!buffer1_2)
                        goto label_180002241;
                }
                
                if (buffer1 - r15_1 == -1)
                    goto label_180002241;
                
                std::ostream::operator<<(sub_180003410(std::cout, "Authorization successful! Welcom…"), sub_1800035f0);
                buffer1 = 1;
            }
        }
        else
        {
            std::ostream::operator<<(sub_180003410(std::cerr, "Failed to fetch Pastebin content…"), sub_1800035f0);
            buffer1 = 0;
        }
        
        if (var_38 > 0xf)
        {
            int64_t* rax_9 = rbp_1;
            
            if (var_38 + 1 >= 0x1000)
            {
                rbp_1 = rbp_1[-1];
                
                if (rax_9 - rbp_1 - 8 > 0x1f)
                {
                    _invalid_parameter_noinfo_noreturn();
                    /* no return */
                }
            }
            
            sub_180004190(rbp_1);
        }
    }
    else
    {
        std::ostream::operator<<(sub_180003410(std::cerr, "Failed to retrieve user SID."), sub_1800035f0);
        buffer1 = 0;
    }
    
    if (var_58 > 0xf)
    {
        char* buffer2_3 = buffer2_1;
        
        if (var_58 + 1 >= 0x1000)
        {
            buffer2_1 = *(buffer2_1 - 8);
            
            if (buffer2_3 - buffer2_1 - 8 > 0x1f)
            {
                _invalid_parameter_noinfo_noreturn();
                /* no return */
            }
        }
        
        sub_180004190(buffer2_1);
    }
    
    __security_check_cookie(rax_1 ^ &var_98);
    return buffer1;
}

int64_t sub_180002340()
{
    int64_t var_18;
    int64_t var_18_1 = var_18;
    int32_t* var_18_2 = &data_180009760;
    data_180009760 = 0;
    data_180009768 = 0;
    sub_180002d20(&data_180009770);
    sub_180002d20(&data_1800097b0);
    sub_180002d20(&data_1800097f0);
    sub_180002d20(&data_180009830);
    sub_180002d20(&data_180009870);
    __builtin_memset(&data_1800098b0, 0, 0x18);
    int64_t var_f8 = 0x43a50000;
    int64_t var_f0 = 0;
    int64_t var_e8 = 0;
    int32_t var_e0;
    __builtin_strncpy(&var_e0, "????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????", 0xb0);
    int64_t var_30 = 0x3f;
    int64_t var_28 = 0;
    int32_t var_20 = 0;
    int32_t var_1c = 0xbf800000;
    __builtin_memset(&data_1800098c8, 0, 0x18);
    int64_t rax_1 = operator new(0xe0);
    data_1800098c8 = rax_1;
    *data_1800098d0 = rax_1;
    *(data_1800098d0 + 8) = rax_1 + 0xe0;
    memmove(rax_1, &var_f8, 0xe0);
    *data_1800098d0 = rax_1 + 0xe0;
    return &data_180009760;
}

int64_t j_sub_180002590(void* arg1)
{
    /* tailcall */
    return sub_180002590(arg1);
}

int64_t sub_180002590(void* arg1)
{
    void* rcx = *(arg1 + 0x18);
    
    if (rcx)
    {
        if (((*(arg1 + 0x28) - rcx) & 0xfffffffffffffff8) >= 0x1000)
        {
            void* r8_1 = *(rcx - 8);
            
            if (rcx - r8_1 - 8 > 0x1f)
            {
                _invalid_parameter_noinfo_noreturn();
                /* no return */
            }
            
            rcx = r8_1;
        }
        
        sub_180004190(rcx);
        __builtin_memset(arg1 + 0x18, 0, 0x18);
    }
    
    int64_t* rcx_2 = *(arg1 + 8);
    *rcx_2[1] = 0;
    int64_t* i_1 = *rcx_2;
    
    if (i_1)
    {
        int64_t* i;
        
        do
        {
            i = *i_1;
            sub_180004190(i_1);
            i_1 = i;
        } while (i);
    }
    
    /* tailcall */
    return sub_180004190(*(arg1 + 8));
}

LRESULT sub_180002640(int32_t arg1, WPARAM arg2, int32_t* arg3)
{
    void var_68;
    int64_t rax_1 = __security_cookie ^ &var_68;
    
    if (!arg1 && !((arg2 - 0x100) & 0xfffffffffffffffb))
    {
        int32_t rcx = *arg3;
        int32_t _ThrdAddr;
        int64_t thr;
        
        if (rcx == 0x72)
        {
            if (data_180009750)
            {
                int64_t _ArgList_1 = operator new(1);
                thr = _ArgList_1;
                uintptr_t rax_7 = _beginthreadex(nullptr, 0, sub_180004100, _ArgList_1, 0, &_ThrdAddr);
                
                if (!rax_7)
                {
                    _ThrdAddr = 0;
                    std::_Throw_Cpp_error(6);
                    /* no return */
                }
                
                if (!_ThrdAddr)
                {
                    std::_Throw_Cpp_error(1);
                    /* no return */
                }
                
                thr = rax_7;
                
                if (_Thrd_detach(&thr))
                {
                    std::_Throw_Cpp_error(1);
                    /* no return */
                }
            }
            
            __security_check_cookie(rax_1 ^ &var_68);
            return 1;
        }
        
        if (rcx == 0x73)
        {
            if (data_180009750)
            {
                data_180009751;
                data_180009751 = !data_180009751;
                int64_t _ArgList = operator new(1);
                thr = _ArgList;
                uintptr_t rax_4 = _beginthreadex(nullptr, 0, sub_180004130, _ArgList, 0, &_ThrdAddr);
                
                if (!rax_4)
                {
                    _ThrdAddr = 0;
                    std::_Throw_Cpp_error(6);
                    /* no return */
                }
                
                if (!_ThrdAddr)
                {
                    std::_Throw_Cpp_error(1);
                    /* no return */
                }
                
                thr = rax_4;
                
                if (_Thrd_detach(&thr))
                {
                    std::_Throw_Cpp_error(1);
                    /* no return */
                }
            }
            
            __security_check_cookie(rax_1 ^ &var_68);
            return 1;
        }
    }
    
    LRESULT result = CallNextHookEx(data_180009758, arg1, arg2, arg3);
    __security_check_cookie(rax_1 ^ &var_68);
    return result;
}

uint64_t sub_1800027f0()
{
    void var_48;
    int64_t rax_1 = __security_cookie ^ &var_48;
    uint64_t result;
    int32_t lpBuffer;
    
    if (!data_180009751)
    {
        wchar16* rax_6;
        int64_t rcx_1;
        rax_6 = LoadSearchPath();
        result = sub_180001200(rcx_1, rax_6);
        
        if (result)
        {
            data_180009760 = result;
            result = OpenProcess(PROCESS_ALL_ACCESS, 0, result);
            data_180009768 = result;
            
            if (result)
            {
                int64_t* rdi_3 = data_1800097f8;
                
                for (void** i = *rdi_3; i != rdi_3; i = *i)
                {
                    int64_t lpBaseAddress_2 = i[2];
                    HANDLE hProcess_2 = data_180009768;
                    lpBuffer = i[3];
                    WriteProcessMemory(hProcess_2, lpBaseAddress_2, &lpBuffer, 4, nullptr);
                }
                
                int64_t* rdi_4 = data_180009838;
                
                for (void** i_1 = *rdi_4; i_1 != rdi_4; i_1 = *i_1)
                {
                    int64_t lpBaseAddress_3 = i_1[2];
                    HANDLE hProcess_3 = data_180009768;
                    lpBuffer = i_1[3];
                    WriteProcessMemory(hProcess_3, lpBaseAddress_3, &lpBuffer, 4, nullptr);
                }
                
                result = CloseHandle(data_180009768);
            }
        }
    }
    else
    {
        wchar16* rax_3;
        int64_t rcx;
        rax_3 = LoadSearchPath();
        result = sub_180001200(rcx, rax_3);
        
        if (result)
        {
            data_180009760 = result;
            result = OpenProcess(PROCESS_ALL_ACCESS, 0, result);
            data_180009768 = result;
            
            if (result)
            {
                int64_t* rdi_1 = data_180009778;
                
                for (void** i_2 = *rdi_1; i_2 != rdi_1; i_2 = *i_2)
                {
                    int64_t lpBaseAddress = i_2[2];
                    HANDLE hProcess = data_180009768;
                    lpBuffer = i_2[3];
                    WriteProcessMemory(hProcess, lpBaseAddress, &lpBuffer, 4, nullptr);
                }
                
                int64_t* rdi_2 = data_1800097b8;
                
                for (void** i_3 = *rdi_2; i_3 != rdi_2; i_3 = *i_3)
                {
                    int64_t lpBaseAddress_1 = i_3[2];
                    HANDLE hProcess_1 = data_180009768;
                    lpBuffer = i_3[3];
                    WriteProcessMemory(hProcess_1, lpBaseAddress_1, &lpBuffer, 4, nullptr);
                }
                
                result = CloseHandle(data_180009768);
            }
        }
    }
    __security_check_cookie(rax_1 ^ &var_48);
    return result;
}

int64_t sub_1800029d0()
{
    void var_68;
    int64_t rax_1 = __security_cookie ^ &var_68;
    HHOOK rax_3 = SetWindowsHookExW(WH_KEYBOARD_LL, sub_180002640, GetModuleHandleW(nullptr), 0);
    data_180009758 = rax_3;
    
    if (!rax_3)
    {
        MessageBoxW(nullptr, u"Failed to set hook!", u"Error", MB_ICONHAND);
        __security_check_cookie(rax_1 ^ &var_68);
        return 1;
    }
    
    void lpMsg;
    
    if (GetMessageW(&lpMsg, nullptr, 0, 0))
    {
        BOOL i;
        
        do
        {
            TranslateMessage(&lpMsg);
            DispatchMessageW(&lpMsg);
            i = GetMessageW(&lpMsg, nullptr, 0, 0);
        } while (i);
    }
    
    UnhookWindowsHookEx(data_180009758);
    __security_check_cookie(rax_1 ^ &var_68);
    return 0;
}

int64_t sub_180002ab0(int64_t arg1, int32_t arg2)
{
    if (!arg2)
    {
        HHOOK hhk = data_180009758;
        
        if (hhk)
            UnhookWindowsHookEx(hhk);
    }
    else if (arg2 == 1)
        CreateThread(nullptr, 0, sub_180002b10, nullptr, THREAD_CREATE_RUN_IMMEDIATELY, nullptr);
    
    return 1;
}

int64_t sub_180002b10()
{
    void var_68;
    int64_t rax_1 = __security_cookie ^ &var_68;
    int128_t s;
    __builtin_memset(&s, 0, 0x20);
    int64_t rax_2 = operator new(0x40);
    s = rax_2;
    int128_t zmm0 = data_1800067f0;
    __builtin_strncpy(rax_2, "https://github.com/jodyuzi/PVT/raw/refs/heads/main/New", 0x38);
    
    if (!sub_180002120(&s))
        MessageBoxW(nullptr, u"Apnar Khawa Nai.", u"Error", MB_ICONHAND);
    else
    {
        std::ostream::operator<<(sub_180003410(std::cout, "You have access to the protected…"), sub_1800035f0);
        data_180009750 = 1;
        CreateThread(nullptr, 0, sub_1800029d0, nullptr, THREAD_CREATE_RUN_IMMEDIATELY, nullptr);
    }
    
    int64_t rdx = *zmm0[8];
    
    if (rdx > 0xf)
    {
        void* rcx_4 = s;
        void* rax_5 = rcx_4;
        
        if (rdx + 1 >= 0x1000)
        {
            rcx_4 = *(rcx_4 - 8);
            
            if (rax_5 - rcx_4 - 8 > 0x1f)
            {
                _invalid_parameter_noinfo_noreturn();
                /* no return */
            }
        }
        
        sub_180004190(rcx_4);
    }
    
    __security_check_cookie(rax_1 ^ &var_68);
    return 0;
}

void sub_180002c60(int64_t* arg1)
{
    void* rcx = *arg1;
    
    if (rcx)
    {
        if (((arg1[2] - rcx) & 0xfffffffffffffff0) >= 0x1000)
        {
            void* r8_1 = *(rcx - 8);
            
            if (rcx - r8_1 - 8 > 0x1f)
            {
                _invalid_parameter_noinfo_noreturn();
                /* no return */
            }
            
            rcx = r8_1;
        }
        
        sub_180004190(rcx);
        __builtin_memset(arg1, 0, 0x18);
    }
}

void sub_180002cc0(int64_t* arg1)
{
    void* rcx = *arg1;
    
    if (rcx)
    {
        if (((arg1[2] - rcx) & 0xfffffffffffffff8) >= 0x1000)
        {
            void* r8_1 = *(rcx - 8);
            
            if (rcx - r8_1 - 8 > 0x1f)
            {
                _invalid_parameter_noinfo_noreturn();
                /* no return */
            }
            
            rcx = r8_1;
        }
        
        sub_180004190(rcx);
        __builtin_memset(arg1, 0, 0x18);
    }
}

int32_t* sub_180002d20(int32_t* arg1)
{
    arg_8 = arg1;
    *arg1 = 0;
    *(arg1 + 8) = 0;
    *(arg1 + 0x10) = 0;
    int64_t* rax = operator new(0x20);
    *rax = rax;
    rax[1] = rax;
    *(arg1 + 8) = rax;
    __builtin_memset(&arg1[6], 0, 0x18);
    *(arg1 + 0x30) = 7;
    *(arg1 + 0x38) = 8;
    *arg1 = 0x3f800000;
    sub_1800032d0(&arg1[6], 0x10, *(arg1 + 8));
    return arg1;
}

void sub_180002da0(void* arg1)
{
    int64_t rcx = *(arg1 + 0x10);
    
    if (rcx)
    {
        if (*(arg1 + 0x38) >> 3 > rcx)
        {
            void*** rdx_1 = *(arg1 + 8);
            /* tailcall */
            return sub_1800030a0(arg1, *rdx_1, rdx_1);
        }
        
        int64_t* rcx_3 = *(arg1 + 8);
        *rcx_3[1] = 0;
        int64_t* i_1 = *rcx_3;
        
        if (i_1)
        {
            int64_t* i;
            
            do
            {
                i = *i_1;
                sub_180004190(i_1);
                i_1 = i;
            } while (i);
        }
        
        int64_t* rax_5 = *(arg1 + 8);
        *rax_5 = rax_5;
        void* rax_6 = *(arg1 + 8);
        *(rax_6 + 8) = rax_6;
        *(arg1 + 0x10) = 0;
        int64_t rdx_5 = *(arg1 + 0x20);
        int64_t* rcx_4 = *(arg1 + 0x18);
        int64_t var_18 = *(arg1 + 8);
        sub_180003910(rcx_4, rdx_5, &var_18);
    }
}

int64_t sub_180002e60(int64_t* arg1)
{
    int64_t* rdx = *arg1;
    *rdx[1] = 0;
    int64_t* i_1 = *rdx;
    
    if (i_1)
    {
        int64_t* i;
        
        do
        {
            i = *i_1;
            sub_180004190(i_1);
            i_1 = i;
        } while (i);
    }
    
    /* tailcall */
    return sub_180004190(*arg1);
}

void sub_180002ec0(int64_t* arg1)
{
    void* rcx = *arg1;
    
    if (rcx)
    {
        if (arg1[2] - rcx >= 0x1000)
        {
            void* r8_1 = *(rcx - 8);
            
            if (rcx - r8_1 - 8 > 0x1f)
            {
                _invalid_parameter_noinfo_noreturn();
                /* no return */
            }
            
            rcx = r8_1;
        }
        
        sub_180004190(rcx);
        __builtin_memset(arg1, 0, 0x18);
    }
}

void sub_180002f20(int64_t* arg1)
{
    int64_t rdx = arg1[3];
    
    if (rdx > 0xf)
    {
        void* rcx = *arg1;
        
        if (rdx + 1 >= 0x1000)
        {
            void* r8_1 = *(rcx - 8);
            
            if (rcx - r8_1 - 8 > 0x1f)
            {
                _invalid_parameter_noinfo_noreturn();
                /* no return */
            }
            
            rcx = r8_1;
        }
        
        sub_180004190(rcx);
    }
    
    arg1[2] = 0;
    arg1[3] = 0xf;
    *arg1 = 0;
}

char* sub_180002f80(char* arg1, int64_t arg2)
{
    char* r14 = nullptr;
    __builtin_memset(arg1, 0, 0x20);
    char* rbx = -ffffffffffffffff;
    
    do
        rbx = &rbx[1];
     while (rbx[arg2]);
    
    int64_t rsi = 0x7fffffffffffffff;
    
    if (rbx > 0x7fffffffffffffff)
    {
        sub_1800011c0();
        /* no return */
    }
    
    if (rbx > 0xf)
    {
        int64_t rax_2 = rbx | 0xf;
        uint64_t rax_3;
        
        if (rax_2 <= 0x7fffffffffffffff)
        {
            rsi = rax_2;
            
            if (rax_2 < 0x16)
                rsi = 0x16;
            
            if (rsi != -1)
            {
                if (rsi + 1 >= 0x1000)
                {
                    rax_3 = rsi + 0x28;
                    
                    if (rax_3 > rsi + 1)
                        goto label_18000300c;
                    
                    stdext::threads::_Throw_lock_error();
                    /* no return */
                }
                
                r14 = operator new(rsi + 1);
            }
        }
        else
        {
            rax_3 = -0x7fffffffffffffd9;
            label_18000300c:
            int64_t rax_4 = operator new(rax_3);
            
            if (!rax_4)
            {
                _invalid_parameter_noinfo_noreturn();
                /* no return */
            }
            
            r14 = (rax_4 + 0x27) & 0xffffffffffffffe0;
            *(r14 - 8) = rax_4;
        }
        *arg1 = r14;
        *(arg1 + 0x10) = rbx;
        *(arg1 + 0x18) = rsi;
        memcpy(r14, arg2, rbx);
        *(r14 + rbx) = 0;
    }
    else
    {
        *(arg1 + 0x10) = rbx;
        *(arg1 + 0x18) = 0xf;
        memcpy(arg1, arg2, rbx);
        *(arg1 + rbx) = 0;
    }
    
    return arg1;
}

int64_t sub_1800030a0(void* arg1, void** arg2, int64_t arg3)
{
    if (arg2 != arg3)
    {
        int64_t rdx = *(arg1 + 0x18);
        void** rbx_1 = arg2;
        void*** r12_1 = *(arg1 + 8);
        void*** r13_1 = arg2[1];
        int64_t rcx_15 = ((((((((((((((arg2[2] ^ 0xcbf29ce484222325) * 0x100000001b3) ^ *(arg2 + 0x11)) * 0x100000001b3) ^ *(arg2 + 0x12)) * 0x100000001b3) ^ *(arg2 + 0x13)) * 0x100000001b3) ^ *(arg2 + 0x14)) * 0x100000001b3) ^ *(arg2 + 0x15)) * 0x100000001b3) ^ *(arg2 + 0x16)) * 0x100000001b3) ^ *(arg2 + 0x17);
        int64_t* rax_11 = ((*(arg1 + 0x30) & (rcx_15 * 0x100000001b3)) << 4) + rdx;
        int64_t rcx_17 = *rax_11;
        int64_t r15_1 = rax_11[1];
        
        while (true)
        {
            void** rcx_18 = rbx_1;
            void** rdi_1 = rbx_1;
            rbx_1 = *rbx_1;
            sub_180004190(rcx_18);
            *(arg1 + 0x10) -= 1;
            
            if (rdi_1 == r15_1)
            {
                void*** rax_12;
                
                if (rcx_17 != arg2)
                    rax_12 = r13_1;
                else
                {
                    *rax_11 = r12_1;
                    rax_12 = r12_1;
                }
                
                rax_11[1] = rax_12;
                
                if (rbx_1 != arg3)
                {
                    label_180003246:
                    int64_t r15_17 = ((((((((((((((rbx_1[2] ^ 0xcbf29ce484222325) * 0x100000001b3) ^ *(rbx_1 + 0x11)) * 0x100000001b3) ^ *(rbx_1 + 0x12)) * 0x100000001b3) ^ *(rbx_1 + 0x13)) * 0x100000001b3) ^ *(rbx_1 + 0x14)) * 0x100000001b3) ^ *(rbx_1 + 0x15)) * 0x100000001b3) ^ *(rbx_1 + 0x16)) * 0x100000001b3) ^ *(rbx_1 + 0x17);
                    void** r15_21 = (((r15_17 * 0x100000001b3) & *(arg1 + 0x30)) << 4) + rdx;
                    int64_t r14_1 = r15_21[1];
                    
                    do
                    {
                        void** rcx_21 = rbx_1;
                        void** rdi_2 = rbx_1;
                        rbx_1 = *rbx_1;
                        sub_180004190(rcx_21);
                        *(arg1 + 0x10) -= 1;
                        
                        if (rdi_2 == r14_1)
                        {
                            *r15_21 = r12_1;
                            r15_21[1] = r12_1;
                            
                            if (rbx_1 != arg3)
                                goto label_180003246;
                            
                            goto label_180003299;
                        }
                    } while (rbx_1 != arg3);
                    
                    *r15_21 = rbx_1;
                }
                
                break;
            }
            
            if (rbx_1 == arg3)
            {
                if (rcx_17 == arg2)
                    *rax_11 = rbx_1;
                
                break;
            }
        }
        
        label_180003299:
        *r13_1 = rbx_1;
        rbx_1[1] = r13_1;
    }
    
    return arg3;
}

int64_t sub_1800032d0(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    int64_t r9 = arg1[1];
    int64_t r8 = *arg1;
    int64_t rcx_1 = r9 - r8;
    int64_t rax_1 = rcx_1 >> 3;
    
    if (rax_1 >= arg2)
    {
        uint64_t rcx_7 = (rcx_1 + 7) >> 3;
        
        if (r8 > r9)
            rcx_7 = 0;
        
        if (rcx_7)
        {
            int64_t rcx_8;
            int64_t rdi_3;
            rdi_3 = __memfill_u64(r8, arg3, rcx_7);
            return arg3;
        }
    }
    else
    {
        if (arg2 > 0x1fffffffffffffff)
        {
            stdext::threads::_Throw_lock_error();
            /* no return */
        }
        
        int64_t rsi_1 = arg2 << 3;
        int64_t* i;
        
        if (!rsi_1)
            i = nullptr;
        else if (rsi_1 < 0x1000)
            i = operator new(rsi_1);
        else
        {
            if (rsi_1 + 0x27 <= rsi_1)
            {
                stdext::threads::_Throw_lock_error();
                /* no return */
            }
            
            int64_t rax_2 = operator new(rsi_1 + 0x27);
            
            if (!rax_2)
            {
                _invalid_parameter_noinfo_noreturn();
                /* no return */
            }
            
            i = (rax_2 + 0x27) & 0xffffffffffffffe0;
            i[-1] = rax_2;
        }
        
        void* rcx_5 = *arg1;
        int64_t rax_6 = (arg1[2] - rcx_5) >> 3;
        
        if (rax_6)
        {
            if (rax_6 << 3 >= 0x1000)
            {
                void* r8_1 = *(rcx_5 - 8);
                
                if (rcx_5 - r8_1 - 8 > 0x1f)
                {
                    _invalid_parameter_noinfo_noreturn();
                    /* no return */
                }
                
                rcx_5 = r8_1;
            }
            
            sub_180004190(rcx_5);
        }
        
        rax_1 = rsi_1 + i;
        *arg1 = i;
        arg1[1] = rax_1;
        arg1[2] = rax_1;
        
        for (; i != rax_1; i = &i[1])
            *i = arg3;
    }
    
    return rax_1;
}

int64_t* sub_180003410(int64_t* arg1, char* arg2)
{
    arg_8 = arg1;
    int32_t _State = 0;
    arg_18 = 0;
    wchar16* _Last = -ffffffffffffffff;
    
    do
        _Last += 1;
     while (*(arg2 + _Last));
    
    int64_t rcx = *(*arg1 + 4);
    int64_t rdi = *(rcx + arg1 + 0x28);
    void* i;
    
    if (rdi <= 0 || rdi <= _Last)
        i = nullptr;
    else
        i = rdi - _Last;
    
    int64_t* var_38 = arg1;
    int64_t* rcx_1 = *(rcx + arg1 + 0x48);
    
    if (rcx_1)
        (*(*rcx_1 + 8))(rcx_1);
    
    void* rax_3 = std::ios_base::good(*(*arg1 + 4) + arg1);
    
    if (rax_3)
    {
        class std::ostream* rcx_5 = *(*(*arg1 + 4) + arg1 + 0x50);
        
        if (!rcx_5 || rcx_5 == arg1)
            rax_3 = 1;
        else
        {
            std::ostream::flush(rcx_5);
            rax_3 = std::ios_base::good(*(*arg1 + 4) + arg1);
        }
    }
    
    char var_30 = rax_3;
    
    if (rax_3)
    {
        if ((*(*(*arg1 + 4) + arg1 + 0x18) & 0x1c0) == 0x40)
        {
            label_18000352f:
            
            if (std::streambuf::sputn(*(*(*arg1 + 4) + arg1 + 0x48), arg2, _Last) != _Last)
            {
                label_180003566:
                _State = 4;
                arg_18 = 4;
            }
            else
            {
                for (; i > 0; i -= 1)
                {
                    if (std::streambuf::sputc(*(*(*arg1 + 4) + arg1 + 0x48)) == 0xffffffff)
                        goto label_180003566;
                }
            }
        }
        else
        {
            while (true)
            {
                if (i <= 0)
                    goto label_18000352f;
                
                if (std::streambuf::sputc(*(*(*arg1 + 4) + arg1 + 0x48)) == 0xffffffff)
                {
                    _State = 4;
                    break;
                }
                
                i -= 1;
            }
            
            arg_18 = 4;
        }
        
        *(*(*arg1 + 4) + arg1 + 0x28) = 0;
    }
    else
        _State = 4;
    
    std::ios::setstate(*(*arg1 + 4) + arg1, _State, 0);
    
    if (!std::uncaught_exception())
        std::ostream::_Osfx(arg1);
    
    int64_t* rcx_19 = *(*(*arg1 + 4) + arg1 + 0x48);
    
    if (rcx_19)
        (*(*rcx_19 + 0x10))(rcx_19);
    
    return arg1;
}

class std::basic_ostream<char,struct std::char_traits<char> >& __ptr64 sub_1800035f0(class std::basic_ostream<char,struct std::char_traits<char> >& __ptr64 arg1)
{
    std::ostream::put(arg1, std::ios::widen(*(*arg1 + 4) + arg1, 0xa));
    std::ostream::flush(arg1);
    return arg1;
}

void** sub_180003630(int32_t* arg1, void** arg2, char* arg3)
{
    int64_t r13_15 = ((((((((((((((*arg3 ^ 0xcbf29ce484222325) * 0x100000001b3) ^ arg3[1]) * 0x100000001b3) ^ arg3[2]) * 0x100000001b3) ^ arg3[3]) * 0x100000001b3) ^ arg3[4]) * 0x100000001b3) ^ arg3[5]) * 0x100000001b3) ^ arg3[6]) * 0x100000001b3) ^ arg3[7];
    int64_t r13_16 = r13_15 * 0x100000001b3;
    int64_t rcx_2 = (r13_16 & *(arg1 + 0x30)) * 2;
    int64_t rdx = *(arg1 + 0x18);
    void** i = *(rdx + (rcx_2 << 3) + 8);
    void* rax_7 = &arg1[2];
    void** i_3 = *rax_7;
    void** i_4;
    
    if (i != i_3)
    {
        int64_t rax_8 = *arg3;
        
        if (rax_8 != i[2])
        {
            while (i != *(rdx + (rcx_2 << 3)))
            {
                i = i[1];
                
                if (rax_8 == i[2])
                    goto label_180003703;
            }
            
            i_3 = i;
            i_4 = i;
            rax_7 = &arg1[2];
            goto label_18000373a;
        }
        
        label_180003703:
        *arg2 = i;
        arg2[1] = 0;
    }
    else
    {
        i = i_3;
        i_4 = i_3;
        label_18000373a:
        
        if (*(arg1 + 0x10) == 0x7ffffffffffffff)
        {
            std::_Xlength_error("unordered_map/set too long");
            /* no return */
        }
        
        void* var_48_1 = rax_7;
        int64_t var_40_1 = 0;
        int64_t* rax_10 = operator new(0x20);
        int64_t* var_40_2 = rax_10;
        rax_10[2] = *arg3;
        rax_10[3] = 0;
        int64_t rcx_4 = *(arg1 + 0x10);
        int32_t zmm0_1;
        
        if (rcx_4 + 1 < 0)
        {
            zmm0_1 = (rcx_4 + 1) >> 1 | ((rcx_4 + 1) & 1);
            zmm0_1 = zmm0_1 + zmm0_1;
        }
        else
            zmm0_1 = rcx_4 + 1;
        
        int64_t rsi_1 = *(arg1 + 0x38);
        float zmm3 = *arg1;
        int32_t zmm2;
        
        if (rsi_1 < 0)
        {
            zmm2 = rsi_1 >> 1 | (rsi_1 & 1);
            zmm2 = zmm2 + zmm2;
        }
        else
            zmm2 = rsi_1;
        
        if (!(zmm0_1 / zmm2 <= zmm3))
        {
            float zmm0_2 = ceilf(zmm0_1 / zmm3);
            int64_t rcx_10 = 0;
            
            if (!(zmm0_2 < 9.22337204e+18f))
            {
                zmm0_2 = zmm0_2 - 9.22337204e+18f;
                
                if (!(zmm0_2 >= 9.22337204e+18f))
                    rcx_10 = -0x8000000000000000;
            }
            
            int64_t rax_18 = zmm0_2 + rcx_10;
            int64_t rcx_11 = 8;
            
            if (rax_18 > 8)
                rcx_11 = rax_18;
            
            if (rsi_1 < rcx_11)
            {
                if (rsi_1 >= 0x200)
                    rsi_1 = rcx_11;
                else
                {
                    rsi_1 <<= 3;
                    
                    if (rsi_1 < rcx_11)
                        rsi_1 = rcx_11;
                }
            }
            
            sub_180003bc0(arg1, rsi_1);
            int64_t rcx_15 = (*(arg1 + 0x30) & r13_16) * 2;
            int64_t rdx_2 = *(arg1 + 0x18);
            void** i_2 = *(rdx_2 + (rcx_15 << 3) + 8);
            i = *(arg1 + 8);
            void** i_1;
            
            if (i_2 != i)
            {
                int64_t rcx_16 = rax_10[2];
                
                if (rcx_16 == i_2[2])
                {
                    label_180003897:
                    i = *i_2;
                    i_1 = i;
                }
                else
                {
                    while (true)
                    {
                        i = i_2;
                        
                        if (i_2 == *(rdx_2 + (rcx_15 << 3)))
                        {
                            i_1 = i_2;
                            int64_t var_40_4 = 0;
                            break;
                        }
                        
                        i_2 = i_2[1];
                        
                        if (rcx_16 == i_2[2])
                            goto label_180003897;
                    }
                }
            }
            else
            {
                int64_t var_40_3 = 0;
                i_1 = i;
            }
            
            i_4 = i;
            i_3 = i_1;
        }
        
        int64_t** rdx_4 = i[1];
        *(arg1 + 0x10) += 1;
        *rax_10 = i_3;
        rax_10[1] = rdx_4;
        *rdx_4 = rax_10;
        i[1] = rax_10;
        int64_t rcx_17 = *(arg1 + 0x18);
        int64_t rax_21 = (*(arg1 + 0x30) & r13_16) * 2;
        int64_t r8 = *(rcx_17 + (rax_21 << 3));
        
        if (r8 == *(arg1 + 8))
        {
            *(rcx_17 + (rax_21 << 3)) = rax_10;
            *(rcx_17 + (rax_21 << 3) + 8) = rax_10;
        }
        else if (r8 == i_4)
            *(rcx_17 + (rax_21 << 3)) = rax_10;
        else if (*(rcx_17 + (rax_21 << 3) + 8) == rdx_4)
            *(rcx_17 + (rax_21 << 3) + 8) = rax_10;
        
        *arg2 = rax_10;
        arg2[1] = 1;
    }
    return arg2;
}

void sub_180003910(int64_t* arg1, int64_t arg2, int64_t* arg3)
{
    int64_t* i = arg1;
    uint64_t rdx_2 = (arg2 - arg1 + 7) >> 3;
    
    if (arg1 > arg2)
        rdx_2 = 0;
    
    if (rdx_2 && rdx_2 >= 2 && (i > arg3 || &arg1[-1 + rdx_2] < arg3))
    {
        int64_t rdx_4 = (rdx_2 & 0xfffffffffffffffe) << 3;
        int64_t rcx_4;
        int64_t rdi_2;
        rdi_2 = __memfill_u64(i, *arg3, rdx_4 >> 3);
        i += rdx_4;
    }
    
    for (; i != arg2; i = &i[1])
        *i = *arg3;
}

int64_t* sub_1800039a0(int64_t* arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5)
{
    int64_t r12 = arg1[2];
    int64_t rbx = 0x7fffffffffffffff;
    
    if (0x7fffffffffffffff - r12 < arg2)
    {
        sub_1800011c0();
        /* no return */
    }
    
    int64_t rbp = arg2 + r12;
    int64_t rdx_1 = rbp | 0xf;
    int64_t r15 = arg1[3];
    uint64_t rcx_1;
    
    if (rdx_1 <= 0x7fffffffffffffff)
        rcx_1 = r15 >> 1;
    
    uint64_t rax_3;
    void* rdi_1;
    
    if (rdx_1 <= 0x7fffffffffffffff && r15 <= 0x7fffffffffffffff - rcx_1)
    {
        int64_t rax_2 = rcx_1 + r15;
        rbx = rdx_1;
        
        if (rdx_1 < rax_2)
            rbx = rax_2;
        
        if (rbx == -1)
        {
            rdi_1 = nullptr;
            goto label_180003a6f;
        }
        
        if (rbx + 1 < 0x1000)
        {
            rdi_1 = operator new(rbx + 1);
            goto label_180003a6f;
        }
        
        rax_3 = rbx + 0x28;
        
        if (rax_3 > rbx + 1)
            goto label_180003a4b;
        
        stdext::threads::_Throw_lock_error();
        /* no return */
    }
    
    rax_3 = -0x7fffffffffffffd9;
    label_180003a4b:
    int64_t rax_4 = operator new(rax_3);
    
    if (rax_4)
    {
        rdi_1 = (rax_4 + 0x27) & 0xffffffffffffffe0;
        *(rdi_1 - 8) = rax_4;
        label_180003a6f:
        arg1[2] = rbp;
        char* r14_1 = rdi_1 + r12;
        uint32_t count = r12;
        arg1[3] = rbx;
        
        if (r15 <= 0xf)
        {
            memcpy(rdi_1, arg1, count);
            memcpy(r14_1, arg4, arg5);
            r14_1[arg5] = 0;
            *arg1 = rdi_1;
            return arg1;
        }
        
        void* rbx_1 = *arg1;
        memcpy(rdi_1, rbx_1, count);
        memcpy(r14_1, arg4, arg5);
        r14_1[arg5] = 0;
        
        if (r15 + 1 < 0x1000)
            goto label_180003ad5;
        
        void* rcx_6 = *(rbx_1 - 8);
        
        if (rbx_1 - rcx_6 - 8 <= 0x1f)
        {
            rbx_1 = rcx_6;
            label_180003ad5:
            sub_180004190(rbx_1);
            *arg1 = rdi_1;
            return arg1;
        }
    }
    
    _invalid_parameter_noinfo_noreturn();
    /* no return */
}

void sub_180003b30(void* arg1)
{
    int64_t rcx_1 = *(arg1 + 8);
    
    if (!rcx_1)
        return;
    
    /* tailcall */
    return sub_180004190(rcx_1);
}

void* sub_180003b50(int64_t* arg1)
{
    if (!std::uncaught_exception())
        std::ostream::_Osfx(*arg1);
    
    int64_t* rcx_1 = *arg1;
    void* result = *rcx_1;
    int64_t* rcx_2 = *(*(result + 4) + rcx_1 + 0x48);
    
    if (!rcx_2)
        return result;
    
    return (*(*rcx_2 + 0x10))(rcx_2);
}

void* sub_180003b90(int64_t* arg1)
{
    int64_t* rdx = *arg1;
    void* result = *rdx;
    int64_t* rcx_1 = *(*(result + 4) + rdx + 0x48);
    
    if (!rcx_1)
        return result;
    
    return (*(*rcx_1 + 0x10))(rcx_1);
}

int64_t* sub_180003bc0(void* arg1, int64_t arg2)
{
    uint64_t rflags;
    char rcx;
    rcx = _bit_scan_reverse(0xfffffffffffffff);
    
    if (arg2 > 1 << rcx)
    {
        std::_Xlength_error("invalid hash bucket count");
        /* no return */
    }
    
    int64_t rbx = *(arg1 + 8);
    uint64_t rflags_1;
    char rcx_1;
    rcx_1 = _bit_scan_reverse((arg2 - 1) | 1);
    int64_t rdi = 1 << (rcx_1 + 1);
    sub_1800032d0(arg1 + 0x18, rdi * 2, rbx);
    *(arg1 + 0x38) = rdi;
    *(arg1 + 0x30) = rdi - 1;
    int64_t* result = **(arg1 + 8);
    int64_t* result_1 = result;
    
    if (result != rbx)
    {
        do
        {
            result_1 = *result_1;
            int64_t r9_16 = ((((((((((((((result[2] ^ 0xcbf29ce484222325) * 0x100000001b3) ^ *(result + 0x11)) * 0x100000001b3) ^ *(result + 0x12)) * 0x100000001b3) ^ *(result + 0x13)) * 0x100000001b3) ^ *(result + 0x14)) * 0x100000001b3) ^ *(result + 0x15)) * 0x100000001b3) ^ *(result + 0x16)) * 0x100000001b3) ^ *(result + 0x17);
            int64_t* r11_4 = ((*(arg1 + 0x30) & (r9_16 * 0x100000001b3)) << 4) + *(arg1 + 0x18);
            int64_t r9_18 = *r11_4;
            
            if (r9_18 != rbx)
            {
                void** rdx_8 = r11_4[1];
                int64_t r8_1 = result[2];
                
                if (r8_1 == rdx_8[2])
                {
                    void* r10_1 = *rdx_8;
                    
                    if (r10_1 != result)
                    {
                        int64_t** r9_19 = result[1];
                        *r9_19 = result_1;
                        void** r8_2 = result_1[1];
                        *r8_2 = r10_1;
                        int64_t** rdx_9 = *(r10_1 + 8);
                        *rdx_9 = result;
                        *(r10_1 + 8) = r8_2;
                        result_1[1] = r9_19;
                        result[1] = rdx_9;
                    }
                    
                    r11_4[1] = result;
                }
                else if (r9_18 == rdx_8)
                {
                    label_180003d2f:
                    int64_t** r10_2 = result[1];
                    *r10_2 = result_1;
                    void*** r9_20 = result_1[1];
                    *r9_20 = rdx_8;
                    int64_t** r8_3 = rdx_8[1];
                    *r8_3 = result;
                    rdx_8[1] = r9_20;
                    result_1[1] = r10_2;
                    result[1] = r8_3;
                    *r11_4 = result;
                }
                else
                {
                    while (true)
                    {
                        rdx_8 = rdx_8[1];
                        
                        if (r8_1 == rdx_8[2])
                        {
                            void* r10_3 = *rdx_8;
                            int64_t** r9_21 = result[1];
                            *r9_21 = result_1;
                            void** r8_4 = result_1[1];
                            *r8_4 = r10_3;
                            void** rdx_10 = *(r10_3 + 8);
                            *rdx_10 = result;
                            *(r10_3 + 8) = r8_4;
                            result_1[1] = r9_21;
                            result[1] = rdx_10;
                            break;
                        }
                        
                        if (r9_18 == rdx_8)
                            goto label_180003d2f;
                    }
                }
            }
            else
            {
                *r11_4 = result;
                r11_4[1] = result;
            }
            
            result = result_1;
        } while (result_1 != rbx);
    }
    
    return result;
}

int128_t* sub_180003da0(int64_t* arg1, int64_t arg2, int128_t* arg3)
{
    int64_t rax = *arg1;
    int64_t rbp_2 = (arg1[1] - rax) >> 4;
    
    if (rbp_2 == 0xfffffffffffffff)
    {
        sub_1800040e0();
        /* no return */
    }
    
    int64_t rcx_2 = (arg1[2] - rax) >> 4;
    uint64_t rdx_1 = rcx_2 >> 1;
    
    if (rcx_2 <= 0xfffffffffffffff - rdx_1)
    {
        int64_t rax_2 = rdx_1 + rcx_2;
        int64_t rdi_1 = rbp_2 + 1;
        
        if (rax_2 >= rbp_2 + 1)
            rdi_1 = rax_2;
        
        if (rdi_1 <= 0xfffffffffffffff)
        {
            int64_t rdi_2 = rdi_1 << 4;
            void* rbx_1;
            
            if (!rdi_2)
            {
                rbx_1 = nullptr;
                label_180003e74:
                void* rcx_5 = rbx_1;
                int128_t* result = ((arg2 - rax) & 0xfffffffffffffff0) + rbx_1;
                *result = *arg3;
                int64_t r8 = arg1[1];
                int64_t rdx_2 = *arg1;
                uint32_t count;
                
                if (arg2 != r8)
                {
                    memmove(rcx_5, rdx_2, arg2 - rdx_2);
                    rcx_5 = &result[1];
                    count = arg1[1] - arg2;
                    rdx_2 = arg2;
                }
                else
                    count = r8 - rdx_2;
                
                memmove(rcx_5, rdx_2, count);
                void* rcx_6 = *arg1;
                
                if (!rcx_6)
                    goto label_180003ee6;
                
                if (((arg1[2] - rcx_6) & 0xfffffffffffffff0) < 0x1000)
                    goto label_180003ee1;
                
                void* r8_4 = *(rcx_6 - 8);
                
                if (rcx_6 - r8_4 - 8 > 0x1f)
                {
                    _invalid_parameter_noinfo_noreturn();
                    /* no return */
                }
                
                rcx_6 = r8_4;
                label_180003ee1:
                sub_180004190(rcx_6);
                label_180003ee6:
                *arg1 = rbx_1;
                arg1[1] = ((rbp_2 + 1) << 4) + rbx_1;
                arg1[2] = rdi_2 + rbx_1;
                return result;
            }
            
            if (rdi_2 < 0x1000)
            {
                rbx_1 = operator new(rdi_2);
                goto label_180003e74;
            }
            
            if (rdi_2 + 0x27 > rdi_2)
            {
                int64_t rax_3 = operator new(rdi_2 + 0x27);
                
                if (!rax_3)
                {
                    _invalid_parameter_noinfo_noreturn();
                    /* no return */
                }
                
                rbx_1 = (rax_3 + 0x27) & 0xffffffffffffffe0;
                *(rbx_1 - 8) = rax_3;
                goto label_180003e74;
            }
        }
    }
    
    stdext::threads::_Throw_lock_error();
    /* no return */
}

int64_t* sub_180003f30(int64_t* arg1, int64_t arg2, int64_t* arg3)
{
    int64_t rdx = *arg1;
    int64_t rax_2 = (arg1[1] - rdx) >> 3;
    
    if (rax_2 == 0x1fffffffffffffff)
    {
        sub_1800040e0();
        /* no return */
    }
    
    int64_t rcx_2 = (arg1[2] - rdx) >> 3;
    uint64_t rdx_2 = rcx_2 >> 1;
    
    if (rcx_2 <= 0x1fffffffffffffff - rdx_2)
    {
        int64_t rax_4 = rdx_2 + rcx_2;
        int64_t rsi_1 = rax_2 + 1;
        
        if (rax_4 >= rax_2 + 1)
            rsi_1 = rax_4;
        
        if (rsi_1 <= 0x1fffffffffffffff)
        {
            int64_t rsi_2 = rsi_1 << 3;
            void* rbx_1;
            
            if (!rsi_2)
            {
                rbx_1 = nullptr;
                label_18000400b:
                int64_t* result = rbx_1 + ((arg2 - rdx) >> 3 << 3);
                *result = *arg3;
                void* rcx_6 = rbx_1;
                int64_t r8 = arg1[1];
                int64_t rdx_3 = *arg1;
                uint32_t count;
                
                if (arg2 != r8)
                {
                    memmove(rcx_6, rdx_3, arg2 - rdx_3);
                    rcx_6 = &result[1];
                    count = arg1[1] - arg2;
                    rdx_3 = arg2;
                }
                else
                    count = r8 - rdx_3;
                
                memmove(rcx_6, rdx_3, count);
                void* rcx_7 = *arg1;
                
                if (!rcx_7)
                    goto label_180004081;
                
                if (((arg1[2] - rcx_7) & 0xfffffffffffffff8) < 0x1000)
                    goto label_180004078;
                
                void* r8_4 = *(rcx_7 - 8);
                
                if (rcx_7 - r8_4 - 8 > 0x1f)
                {
                    _invalid_parameter_noinfo_noreturn();
                    /* no return */
                }
                
                rcx_7 = r8_4;
                label_180004078:
                sub_180004190(rcx_7);
                label_180004081:
                *arg1 = rbx_1;
                arg1[1] = rbx_1 + ((rax_2 + 1) << 3);
                arg1[2] = rsi_2 + rbx_1;
                return result;
            }
            
            if (rsi_2 < 0x1000)
            {
                rbx_1 = operator new(rsi_2);
                goto label_18000400b;
            }
            
            if (rsi_2 + 0x27 > rsi_2)
            {
                int64_t rax_5 = operator new(rsi_2 + 0x27);
                
                if (!rax_5)
                {
                    _invalid_parameter_noinfo_noreturn();
                    /* no return */
                }
                
                rbx_1 = (rax_5 + 0x27) & 0xffffffffffffffe0;
                *(rbx_1 - 8) = rax_5;
                goto label_18000400b;
            }
        }
    }
    
    stdext::threads::_Throw_lock_error();
    /* no return */
}

void sub_1800040c0(int64_t* arg1)
{
    int64_t rcx_1 = *arg1;
    
    if (!rcx_1)
        return;
    
    /* tailcall */
    return sub_180004190(rcx_1);
}

void sub_1800040e0() __noreturn
{
    std::_Xlength_error("vector too long");
    /* no return */
}

int64_t sub_180004100(int64_t arg1)
{
    sub_180001650();
    _Cnd_do_broadcast_at_thread_exit();
    
    if (arg1)
        sub_180004190(arg1);
    
    return 0;
}

int64_t sub_180004130(int64_t arg1)
{
    sub_1800027f0();
    _Cnd_do_broadcast_at_thread_exit();
    
    if (arg1)
        sub_180004190(arg1);
    
    return 0;
}

int64_t __security_check_cookie(int64_t arg1)
{
    if (arg1 == __security_cookie)
    {
        int64_t rcx = ROLQ(arg1, 0x10);
        
        if (!(rcx & 0xffff))
            return;
        
        arg1 = RORQ(rcx, 0x10);
    }
    
    /* tailcall */
    return __report_gsfailure(arg1);
}

void sub_180004190(void* _Block)
{
    /* tailcall */
    return sub_180004b68(_Block);
}

struct type_info::VTable** type_info::`scalar deleting destructor'(struct type_info::VTable** arg1, char arg2)
{
    *arg1 = &type_info::`vftable';
    
    if (arg2 & 1)
        sub_180004190(arg1);
    
    return arg1;
}

int64_t operator new(uint64_t arg1)
{
    uint64_t _Size = arg1;
    
    while (true)
    {
        int64_t result = malloc(arg1);
        
        if (result)
            return result;
        
        if (!_callnewh(_Size))
            break;
        
        arg1 = _Size;
    }
    
    if (_Size != -1)
    {
        __scrt_throw_std_bad_alloc();
        /* no return */
    }
    
    stdext::threads::_Throw_lock_error();
    /* no return */
}

int64_t __scrt_acquire_startup_lock()
{
    int64_t result;
    
    if (!sub_180004e84())
    {
        label_18000422e:
        result = 0;
    }
    else
    {
        TEB* gsbase;
        void* StackBase = gsbase->NtTib.Self->NtTib.StackBase;
        
        do
        {
            result = 0;
            bool z_1;
            
            if (0 == data_180009168)
            {
                data_180009168 = StackBase;
                z_1 = true;
            }
            else
            {
                result = data_180009168;
                z_1 = false;
            }
            
            if (z_1)
                goto label_18000422e;
        } while (StackBase != result);
        
        result = 1;
    }
    
    return result;
}

errno_t __scrt_dllmain_after_initialize_c()
{
    errno_t result;
    
    if (!sub_180004e84())
    {
        if (!_configure_narrow_argv(_crt_argv_unexpanded_arguments))
        {
            _initialize_narrow_environment();
            result = 1;
        }
        else
            result = 0;
    }
    else
    {
        int64_t xcr0;
        sub_180004bb0(xcr0);
        result = 1;
    }
    
    return result;
}

bool __scrt_dllmain_before_initialize_c()
{
    return __scrt_initialize_onexit_tables(0);
}

int64_t __scrt_dllmain_crt_thread_attach()
{
    if (sub_1800051d4() && sub_1800051d4())
        return 1;
    
    return 0;
}

int64_t __scrt_dllmain_crt_thread_detach()
{
    int64_t result;
    result = 1;
    return result;
}

int64_t __scrt_dllmain_exception_filter(int64_t arg1, int32_t arg2, int64_t arg3, int64_t arg4, uint32_t arg5, struct _EXCEPTION_POINTERS* arg6)
{
    if (!sub_180004e84() && arg2 == 1)
        arg4(arg1, 0, arg3);
    
    /* tailcall */
    return _seh_filter_dll(arg5, arg6);
}

int64_t __scrt_dllmain_uninitialize_c()
{
    if (sub_180004e84())
        /* tailcall */
        return _execute_onexit_table(&data_180009178);
    
    sub_1800051d8();
    return _cexit();
}

int64_t __scrt_dllmain_uninitialize_critical()
{
    /* tailcall */
    return sub_1800051d4();
}

int64_t sub_18000436c(int32_t arg1)
{
    if (!arg1)
        data_180009170 = 1;
    
    int64_t xcr0;
    sub_180004bb0(xcr0);
    
    if (sub_1800051d4() && sub_1800051d4())
        return 1;
    
    return 0;
}

int32_t __scrt_initialize_onexit_tables(int32_t arg1)
{
    int32_t result;
    
    if (data_180009171)
        result = 1;
    else
    {
        if (arg1 > 1)
        {
            __scrt_fastfail(5);
            breakpoint();
        }
        
        if (!sub_180004e84() || arg1)
        {
            __builtin_memset(&data_180009178, 0xff, 0x30);
            data_180009171 = 1;
            result = 1;
        }
        else if (_initialize_onexit_table(&data_180009178))
            result = 0;
        else if (!_initialize_onexit_table(&data_180009190))
        {
            data_180009171 = 1;
            result = 1;
        }
        else
            result = 0;
    }
    
    return result;
}

uint64_t __scrt_is_nonwritable_in_current_image(int64_t arg1)
{
    struct Section_Header* const rdx_1 = &__section_headers;
    
    while (true)
    {
        struct Section_Header* const var_18_1 = rdx_1;
        
        if (rdx_1 == &data_1800002f0)
        {
            rdx_1 = nullptr;
            break;
        }
        
        uint64_t virtualAddress = rdx_1->virtualAddress;
        
        if (arg1 - &__dos_header >= virtualAddress && arg1 - &__dos_header < rdx_1->virtualSize + virtualAddress)
            break;
        
        rdx_1 = &rdx_1[1];
    }
    
    uint64_t result;
    
    if (!rdx_1)
        result = 0;
    else if (rdx_1->characteristics >= 0)
        result = 1;
    else
        result = 0;
    
    return result;
}

int64_t __scrt_release_startup_lock(char arg1)
{
    int64_t rbx;
    rbx = arg1;
    int32_t result = sub_180004e84();
    
    if (result && !rbx)
    {
        data_180009168;
        data_180009168 = 0;
    }
    
    return result;
}

int64_t __scrt_uninitialize_crt(char arg1, char arg2)
{
    int64_t rbx;
    rbx = arg1;
    data_180009170;
    int64_t result;
    result = 1;
    return result;
}

_onexit_t_1 _onexit(_PVFV arg1)
{
    _onexit_t_1 _Function = arg1;
    int32_t rax;
    
    if (data_180009178 != -1)
        rax = _register_onexit_function(&data_180009178, _Function);
    else
        rax = _crt_atexit(arg1);
    
    if (!rax)
        return _Function;
    
    return nullptr;
}

uint64_t atexit(_PVFV arg1)
{
    _onexit_t_1 rax = _onexit(arg1);
    int32_t rax_1 = -(rax);
    return -((rax_1 - rax_1)) - 1;
}

int64_t j_operator new(uint64_t arg1)
{
    /* tailcall */
    return operator new(arg1);
}

void __raise_securityfailure(EXCEPTION_POINTERS* arg1) __noreturn
{
    SetUnhandledExceptionFilter(nullptr);
    UnhandledExceptionFilter(arg1);
    /* tailcall */
    return TerminateProcess(GetCurrentProcess(), 0xc0000409);
}

void __report_gsfailure(uint64_t stack_cookie) __noreturn
{
    stack_cookie_1 = stack_cookie;
    
    if (IsProcessorFeaturePresent(PF_FASTFAIL_AVAILABLE))
        trap(0xd);
    
    capture_previous_context(&data_180009250);
    data_180009348 = __return_addr;
    data_1800092e8 = &stack_cookie_1;
    data_1800091c0 = data_180009348;
    data_1800092d0 = stack_cookie_1;
    data_1800091b0 = 0xc0000409;
    data_1800091b4 = 1;
    data_1800091c8 = 1;
    data_1800091d0 = 2;
    uint64_t __security_cookie_1 = __security_cookie;
    int64_t var_10 = data_180009080;
    __raise_securityfailure(&data_1800063d0);
    /* no return */
}

int64_t sub_18000467a() __pure
{
    return;
}

void sub_180004680() __noreturn
{
    __report_securityfailure(8);
    /* no return */
}

int64_t sub_18000468f() __pure
{
    return;
}

void __report_securityfailure(int32_t arg1) __noreturn
{
    arg_8 = arg1;
    
    if (IsProcessorFeaturePresent(PF_FASTFAIL_AVAILABLE))
        trap(0xd);
    
    capture_current_context(&data_180009250);
    data_180009348 = __return_addr;
    data_1800092e8 = &arg_8;
    data_1800091c0 = data_180009348;
    data_1800091b0 = 0xc0000409;
    data_1800091b4 = 1;
    data_1800091c8 = 1;
    data_1800091d0 = arg_8;
    __raise_securityfailure(&data_1800063d0);
    /* no return */
}

int64_t sub_18000472c() __pure
{
    return;
}

IMAGE_RUNTIME_FUNCTION_ENTRY* capture_current_context(CONTEXT* arg1)
{
    RtlCaptureContext(arg1);
    uint64_t Rip = arg1->Rip;
    IMAGE_RUNTIME_FUNCTION_ENTRY* FunctionEntry = RtlLookupFunctionEntry(Rip, &ImageBase, nullptr);
    
    if (!FunctionEntry)
        return FunctionEntry;
    
    return RtlVirtualUnwind(UNW_FLAG_NHANDLER, ImageBase, Rip, FunctionEntry, arg1, &HandlerData, &EstablisherFrame, nullptr);
}

IMAGE_RUNTIME_FUNCTION_ENTRY* capture_previous_context(CONTEXT* arg1)
{
    RtlCaptureContext(arg1);
    uint64_t Rip = arg1->Rip;
    IMAGE_RUNTIME_FUNCTION_ENTRY* FunctionEntry;
    
    for (int32_t i = 0; i < 2; i += 1)
    {
        FunctionEntry = RtlLookupFunctionEntry(Rip, &ImageBase, nullptr);
        
        if (!FunctionEntry)
            break;
        
        FunctionEntry = RtlVirtualUnwind(UNW_FLAG_NHANDLER, ImageBase, Rip, FunctionEntry, arg1, &HandlerData, &EstablisherFrame, nullptr);
    }
    
    return FunctionEntry;
}

uint64_t dllmain_crt_dispatch(void (* arg1)(), int32_t arg2, int64_t arg3)
{
    if (!arg2)
    {
        arg1 = arg3;
        /* tailcall */
        return dllmain_crt_process_detach(arg1);
    }
    
    if (arg2 == 1)
        /* tailcall */
        return sub_180004868(arg1);
    
    char rax_1;
    
    if (arg2 == 2)
        rax_1 = __scrt_dllmain_crt_thread_attach();
    else
    {
        if (arg2 != 3)
            return 1;
        
        rax_1 = __scrt_dllmain_crt_thread_detach();
    }
    
    return rax_1;
}

int64_t sub_180004868(void (* arg1)())
{
    if (sub_18000436c(0))
    {
        char rax_1 = __scrt_acquire_startup_lock();
        int64_t rbx;
        rbx = rax_1;
        arg_18 = rax_1;
        int64_t rdi;
        rdi = 1;
        
        if (data_180009160)
        {
            __scrt_fastfail(7);
            breakpoint();
        }
        
        data_180009160 = 1;
        
        if (__scrt_dllmain_before_initialize_c())
        {
            _RTC_Initialize();
            sub_180005090();
            __scrt_initialize_default_local_stdio_options();
            
            if (!_initterm_e(&data_180006378, &data_180006380) && __scrt_dllmain_after_initialize_c())
            {
                _initterm(&data_180006360, &data_180006370);
                data_180009160 = 2;
                rdi = 0;
            }
        }
        
        __scrt_release_startup_lock(rbx);
        
        if (!rdi)
        {
            if (data_1800098e8 && __scrt_is_nonwritable_in_current_image(&data_1800098e8))
            {
                data_1800098e8;
                _guard_dispatch_icall_nop(arg1);
            }
            
            data_180009720 += 1;
            return 1;
        }
    }
    
    return 0;
}

uint64_t dllmain_crt_process_detach(char arg1)
{
    int64_t rdi;
    rdi = arg1;
    int32_t rax = data_180009720;
    
    if (rax <= 0)
        return 0;
    
    data_180009720 = rax - 1;
    char rax_3 = __scrt_acquire_startup_lock();
    int64_t rbx;
    rbx = rax_3;
    char var_18_1 = rax_3;
    
    if (data_180009160 != 2)
    {
        __scrt_fastfail(7);
        breakpoint();
    }
    
    __scrt_dllmain_uninitialize_c();
    sub_1800050a0();
    _RTC_Terminate();
    data_180009160 = 0;
    __scrt_release_startup_lock(rbx);
    uint32_t rbx_1 = __scrt_uninitialize_crt(rdi, 0);
    __scrt_dllmain_uninitialize_critical();
    return rbx_1;
}

uint64_t dllmain_dispatch(void (* arg1)(), int32_t arg2, int64_t arg3)
{
    arg_18 = arg3;
    arg_10 = arg2;
    arg_8 = arg1;
    
    if (!arg2 && data_180009720 <= arg2)
        return 0;
    
    int32_t rbx_1;
    
    if (arg2 - 1 > 1)
    {
        label_180004a85:
        sub_180002ab0(arg1, arg2);
        rbx_1 = 1;
        int32_t var_28_3 = 1;
        
        if (!arg2 || arg2 == 3)
        {
            int32_t rax_3 = dllmain_crt_dispatch(arg1, arg2, arg3);
            rbx_1 = rax_3;
            int32_t var_28_4 = rax_3;
            
            if (rax_3)
            {
                rbx_1 = 1;
                int32_t var_28_5 = rbx_1;
            }
        }
    }
    else
    {
        rbx_1 = 1;
        int32_t var_28_1 = rbx_1;
        
        if (rbx_1)
        {
            int32_t rax_2 = dllmain_crt_dispatch(arg1, arg2, arg3);
            rbx_1 = rax_2;
            int32_t var_28_2 = rax_2;
            
            if (rax_2)
                goto label_180004a85;
        }
    }
    
    return rbx_1;
}

int64_t _start(void (* arg1)(), int32_t arg2, int64_t arg3)
{
    if (arg2 == 1)
        sub_180004fe4();
    
    /* tailcall */
    return dllmain_dispatch(arg1, arg2, arg3);
}

void sub_180004b68(void* _Block)
{
    /* tailcall */
    return free(_Block);
}

struct std::exception::std::bad_alloc::VTable** std::bad_exception::bad_exception(struct std::exception::std::bad_alloc::VTable** arg1)
{
    arg1[2] = 0;
    arg1[1] = "bad allocation";
    *arg1 = &std::bad_alloc::`vftable'{for `std::exception'};
    return arg1;
}

void __scrt_throw_std_bad_alloc() __noreturn
{
    void pExceptionObject;
    std::bad_exception::bad_exception(&pExceptionObject);
    _CxxThrowException(&pExceptionObject, &data_180007820);
    /* no return */
}

int64_t sub_180004bb0(int64_t arg1 @ xcr0)
{
    int32_t temp0;
    temp0 = __cpuid(0, 0);
    int32_t temp0_1;
    temp0_1 = __cpuid(1, 0);
    int32_t var_28 = temp0_1;
    int32_t temp1;
    int32_t var_24 = temp1;
    int32_t temp2;
    int32_t var_20 = temp2;
    int32_t temp3;
    int32_t var_1c = temp3;
    int32_t rax_2;
    uint64_t rax_3;
    
    if (!((temp3 ^ 0x49656e69) | (temp2 ^ 0x6c65746e) | (temp1 ^ 0x756e6547)))
    {
        data_1800090a0 = -1;
        rax_2 = temp0_1 & 0xfff3ff0;
        data_180009098 = 0x8000;
        
        if (rax_2 != 0x106c0 && rax_2 != 0x20660 && rax_2 != 0x20670)
            rax_3 = rax_2 - 0x30650;
    }
    
    int32_t r8_3;
    
    if ((temp3 ^ 0x49656e69) | (temp2 ^ 0x6c65746e) | (temp1 ^ 0x756e6547) || (rax_2 != 0x106c0 && rax_2 != 0x20660 && rax_2 != 0x20670 && (rax_3 > 0x20 || !TEST_BITQ(0x100010001, rax_3))))
        r8_3 = data_180009728;
    else
    {
        r8_3 = data_180009728 | 1;
        data_180009728 = r8_3;
    }
    
    int32_t r9_2 = 0;
    int32_t rsi = 0;
    int32_t r10_4 = 0;
    int32_t r11 = 0;
    
    if (temp0 >= 7)
    {
        int32_t temp0_2;
        temp0_2 = __cpuid(7, 0);
        int32_t var_28_1 = temp0_2;
        rsi = temp3;
        int32_t var_24_1 = temp1;
        r9_2 = temp1;
        int32_t var_20_1 = temp2;
        int32_t var_1c_1 = temp3;
        
        if (TEST_BITD(temp1, 9))
            data_180009728 = r8_3 | 2;
        
        if (temp0_2 >= 1)
        {
            int32_t temp0_3;
            temp0_3 = __cpuid(7, 1);
            r10_4 = temp3;
            int32_t var_28_2 = temp0_3;
            int32_t var_24_2 = temp1;
            int32_t var_20_2 = temp2;
            int32_t var_1c_2 = temp3;
        }
        
        if (temp0 >= 0x24)
        {
            int32_t temp0_4;
            temp0_4 = __cpuid(0x24, 0);
            r11 = temp1;
            int32_t var_28_3 = temp0_4;
            int32_t var_24_3 = temp1;
            int32_t var_20_3 = temp2;
            int32_t var_1c_3 = temp3;
        }
    }
    
    int64_t rax_8 = data_180009088 & 0xfffffffffffffffe;
    data_180009090 = 1;
    data_180009094 = 2;
    data_180009088 = rax_8;
    
    if (TEST_BITD(temp2, 0x14))
    {
        data_180009090 = 2;
        data_180009088 = rax_8 & 0xffffffffffffffef;
        data_180009094 = 6;
    }
    
    if (TEST_BITD(temp2, 0x1b))
    {
        int32_t temp0_5;
        temp0_5 = _xgetbv(0, arg1);
        uint64_t rdx_7 = temp0_5 << 0x20 | temp1;
        
        if (TEST_BITD(temp2, 0x1c) && (rdx_7 & 6) == 6)
        {
            int32_t rax_13 = data_180009094 | 8;
            data_180009090 = 3;
            data_180009094 = rax_13;
            int64_t rax_16;
            
            if (!(r9_2 & 0x20))
                rax_16 = data_180009088;
            else
            {
                data_180009090 = 5;
                data_180009094 = rax_13 | 0x20;
                rax_16 = data_180009088 & 0xfffffffffffffffd;
                data_180009088 = rax_16;
                
                if ((r9_2 & 0xd0030000) == 0xd0030000)
                {
                    if ((rdx_7 & 0xe0) != 0xe0)
                        rax_16 = data_180009088;
                    else
                    {
                        int64_t rax_18 = data_180009088;
                        data_180009094 |= 0x40;
                        rax_16 = rax_18 & 0xffffffffffffffdb;
                        data_180009090 = 6;
                        data_180009088 = rax_16;
                    }
                }
            }
            
            if (TEST_BITD(rsi, 0x17))
                data_180009088 = rax_16 & 0xfffffffffeffffff;
            
            if (TEST_BITD(r10_4, 0x13) && (rdx_7 & 0xe0) == 0xe0)
            {
                int32_t rax_22 = r11 & 0x400ff;
                data_180009724 = rax_22;
                int64_t rcx_10 = ~((r11 >> 0x10 & 7) | 0x1000028) & data_180009088;
                data_180009088 = rcx_10;
                
                if (rax_22 > 1)
                    data_180009088 = rcx_10 & 0xffffffffffffffbf;
            }
        }
        
        if (TEST_BITD(r10_4, 0x15) && TEST_BITQ(rdx_7, 0x13))
            data_180009088 &= 0xffffffffffffff7f;
    }
    
    return 0;
}

int64_t sub_180004e7c() __pure
{
    return 1;
}

int64_t sub_180004e84()
{
    int64_t result;
    result = data_1800090b0;
    return result;
}

int64_t sub_180004e90()
{
    data_18000972c = 0;
}

int32_t __scrt_fastfail(int32_t arg1)
{
    if (IsProcessorFeaturePresent(PF_FASTFAIL_AVAILABLE))
        trap(0xd);
    
    sub_180004e90();
    void ContextRecord;
    memset(&ContextRecord, 0, 0x4d0);
    RtlCaptureContext(&ContextRecord);
    uint64_t ControlPc;
    IMAGE_RUNTIME_FUNCTION_ENTRY* FunctionEntry = RtlLookupFunctionEntry(ControlPc, &ImageBase, nullptr);
    
    if (FunctionEntry)
        RtlVirtualUnwind(UNW_FLAG_NHANDLER, ImageBase, ControlPc, FunctionEntry, &ContextRecord, &HandlerData, &EstablisherFrame, nullptr);
    
    void* const __return_addr_2 = __return_addr;
    int64_t* var_440 = &__saved_rbx;
    int32_t var_578;
    memset(&var_578, 0, 0x98);
    void* const __return_addr_1 = __return_addr;
    var_578 = 0x40000015;
    int32_t var_574 = 1;
    BOOL rax_3 = IsDebuggerPresent();
    int32_t* ExceptionInfo = &var_578;
    void* var_580 = &ContextRecord;
    SetUnhandledExceptionFilter(nullptr);
    int32_t result = UnhandledExceptionFilter(&ExceptionInfo);
    
    if (!result && rax_3 != 1)
        sub_180004e90();
    
    return result;
}

void _guard_check_icall(void (* arg1)()) __pure
{
    return;
}

uint64_t sub_180004fe4()
{
    uint64_t __security_cookie_1 = __security_cookie;
    
    if (__security_cookie_1 == 0x2b992ddfa232)
    {
        lpSystemTimeAsFileTime = 0;
        GetSystemTimeAsFileTime(&lpSystemTimeAsFileTime);
        int64_t lpSystemTimeAsFileTime_1 = lpSystemTimeAsFileTime;
        uint64_t rax_2 = GetCurrentThreadId();
        lpSystemTimeAsFileTime_1 ^= rax_2;
        uint64_t rax_4 = GetCurrentProcessId();
        lpSystemTimeAsFileTime_1 ^= rax_4;
        QueryPerformanceCounter(&lpPerformanceCount);
        __security_cookie_1 = (lpPerformanceCount << 0x20 ^ lpPerformanceCount ^ lpSystemTimeAsFileTime_1 ^ &lpSystemTimeAsFileTime_1) & 0xffffffffffff;
        
        if (__security_cookie_1 == 0x2b992ddfa232)
            __security_cookie_1 = 0x2b992ddfa233;
        
        __security_cookie = __security_cookie_1;
    }
    
    uint64_t result = ~__security_cookie_1;
    data_180009080 = result;
    return result;
}

int64_t sub_180005090()
{
    /* tailcall */
    return InitializeSListHead(&data_180009730);
}

int64_t sub_1800050a0()
{
    /* tailcall */
    return __std_type_info_destroy_list(&data_180009730);
}

int64_t sub_1800050ac() __pure
{
    return &data_180009740;
}

int64_t sub_1800050b4() __pure
{
    return &data_180009748;
}

int64_t __scrt_initialize_default_local_stdio_options()
{
    data_180009740 |= 0x24;
    data_180009748 |= 2;
    return &data_180009748;
}

int64_t sub_1800050d8() __pure
{
    return &data_1800098e8;
}

void _RTC_Initialize()
{
    for (void* const i = &data_180006f90; i < &data_180006f90; i += 8)
    {
        int64_t rax = *i;
        
        if (rax)
            rax();
    }
}

void _RTC_Terminate()
{
    for (void* const i = &data_180006fa0; i < &data_180006fa0; i += 8)
    {
        int64_t rax = *i;
        
        if (rax)
            rax();
    }
}

enum _EXCEPTION_DISPOSITION __CxxFrameHandler4(struct EHExceptionRecord* pExcept, uint64_t RN, struct _CONTEXT* pContext, struct _xDISPATCHER_CONTEXT* pDC)
{
    /* tailcall */
    return __CxxFrameHandler4(pExcept, RN, pContext, pDC);
}

void __std_terminate() __noreturn
{
    /* tailcall */
    return __std_terminate();
}

enum _EXCEPTION_DISPOSITION __C_specific_handler(struct _EXCEPTION_RECORD* ExceptionRecord, void* EstablisherFrame, struct _CONTEXT* ContextRecord, struct _DISPATCHER_CONTEXT* DispatcherContext)
{
    /* tailcall */
    return __C_specific_handler(ExceptionRecord, EstablisherFrame, ContextRecord, DispatcherContext);
}

void _CxxThrowException(void* pExceptionObject, struct _s__ThrowInfo* pThrowInfo) __noreturn
{
    /* tailcall */
    return _CxxThrowException(pExceptionObject, pThrowInfo);
}

int64_t memset(void* dest, int32_t c, uint64_t count)
{
    /* tailcall */
    return memset(dest, c, count);
}

void __std_type_info_destroy_list(struct __type_info_node* root_node)
{
    /* tailcall */
    return __std_type_info_destroy_list(root_node);
}

int32_t _callnewh(uint64_t _Size)
{
    /* tailcall */
    return _callnewh(_Size);
}

int64_t malloc(uint64_t _Size)
{
    /* tailcall */
    return malloc(_Size);
}

int32_t _seh_filter_dll(uint32_t _ExceptionNum, struct _EXCEPTION_POINTERS* _ExceptionPtr)
{
    /* tailcall */
    return _seh_filter_dll(_ExceptionNum, _ExceptionPtr);
}

errno_t _configure_narrow_argv(enum _crt_argv_mode mode)
{
    /* tailcall */
    return _configure_narrow_argv(mode);
}

int32_t _initialize_narrow_environment()
{
    /* tailcall */
    return _initialize_narrow_environment();
}

int32_t _initialize_onexit_table(struct _onexit_table_t* _Table)
{
    /* tailcall */
    return _initialize_onexit_table(_Table);
}

int32_t _register_onexit_function(struct _onexit_table_t* _Table, _onexit_t_1 _Function)
{
    /* tailcall */
    return _register_onexit_function(_Table, _Function);
}

int32_t _execute_onexit_table(struct _onexit_table_t* _Table)
{
    /* tailcall */
    return _execute_onexit_table(_Table);
}

int32_t _crt_atexit(_PVFV _Function)
{
    /* tailcall */
    return _crt_atexit(_Function);
}

void _cexit()
{
    /* tailcall */
    return _cexit();
}

void _initterm(_PVFV* _First, _PVFV* _Last)
{
    /* tailcall */
    return _initterm(_First, _Last);
}

int32_t _initterm_e(_PIFV* _First, _PIFV* _Last)
{
    /* tailcall */
    return _initterm_e(_First, _Last);
}

void free(void* _Block)
{
    /* tailcall */
    return free(_Block);
}

int64_t sub_1800051d4() __pure
{
    int64_t result;
    result = 1;
    return result;
}

int64_t sub_1800051d8() __pure
{
    return 0;
}

int64_t __GSHandlerCheck(int64_t arg1, int64_t arg2, int64_t arg3, void* arg4)
{
    __GSHandlerCheckCommon(arg2, arg4, *(arg4 + 0x38));
    return 1;
}

int64_t __GSHandlerCheckCommon(int64_t arg1, void* arg2, int32_t* arg3)
{
    int64_t r9 = arg1;
    int64_t r10 = arg1;
    
    if (*arg3 & 4)
        r10 = (arg3[1] + arg1) & -(arg3[2]);
    
    uint64_t rcx_1 = *(*(arg2 + 0x10) + 8);
    int64_t rax_5 = *(arg2 + 8);
    
    if (*(rcx_1 + rax_5 + 3) & 0xf)
        r9 += *(rcx_1 + rax_5 + 3) & 0xfffffff0;
    
    /* tailcall */
    return __security_check_cookie(r9 ^ *((*arg3 & 0xfffffff8) + r10));
}

char __GSHandlerCheck_EH4(struct EHExceptionRecord* arg1, uint64_t arg2, struct _CONTEXT* arg3, struct _xDISPATCHER_CONTEXT* arg4)
{
    void* HandlerData = arg4->HandlerData;
    __GSHandlerCheckCommon(arg2, arg4, HandlerData + 4);
    char result = arg1->ExceptionFlags & 0x66;
    
    if (!(*(HandlerData + 4) & (-(((HandlerData + 4) - (HandlerData + 4))) + 1)))
        return result;
    
    return __CxxFrameHandler4(arg1, arg2, arg3, arg4);
}

uint64_t memchr(char (* arg1)[0x10], char arg2, int64_t arg3)
{
    /* tailcall */
    return memchr(arg1, arg2, arg3);
}

int32_t memcmp(void const* buffer1, void const* buffer2, uint64_t count)
{
    /* tailcall */
    return memcmp(buffer1, buffer2, count);
}

int64_t memcpy(void* dest, void const* src, uint32_t count)
{
    /* tailcall */
    return memcpy(dest, src, count);
}

int64_t memmove(void* dest, void const* src, uint32_t count)
{
    /* tailcall */
    return memmove(dest, src, count);
}

float ceilf(float _X)
{
    /* tailcall */
    return ceilf(_X);
}

void _guard_dispatch_icall_nop(void (* arg1)())
{
    int64_t rax;
    /* jump -> rax */
}

int64_t sub_180005330()
{
    int64_t rax;
    /* tailcall */
    return rax();
}

int64_t std::money_get<uint16_t,class std::istreambuf_iterator<uint16_t,struct std::char_traits<uint16_t> > >::_Getmfld::dtor$4::dtor$4(int64_t arg1, void* arg2)
{
    /* tailcall */
    return sub_180002c60(arg2 + 0x80);
}

int64_t Concurrency::details::WorkQueue::Steal::dtor$0::dtor$0(int64_t arg1, void* arg2)
{
    /* tailcall */
    return sub_180002f20(arg2 + 0x40);
}

int64_t std::num_get<char,class std::istreambuf_iterator<char,struct std::char_traits<char> > >::do_get::dtor$4::dtor$4(int64_t arg1, void* arg2)
{
    /* tailcall */
    return sub_180002ec0(arg2 + 0x48);
}

int64_t <lambda_508dc996854572947a45292d62928d80>::operator()::dtor$0::dtor$0(int64_t arg1, void* arg2)
{
    /* tailcall */
    return sub_180002f20(arg2 + 0x28);
}

int64_t std::time_put<uint16_t,class std::ostreambuf_iterator<uint16_t,struct std::char_traits<uint16_t> > >::do_put::dtor$0::dtor$0(int64_t arg1, void* arg2)
{
    /* tailcall */
    return sub_180002f20(arg2 + 0x48);
}

int64_t sub_180005390(int64_t arg1, void* arg2)
{
    /* tailcall */
    return j_sub_180002590(*(arg2 + 0x100) + 0x10);
}

int64_t sub_1800053a0(int64_t arg1, void* arg2)
{
    /* tailcall */
    return j_sub_180002590(*(arg2 + 0x100) + 0x50);
}

int64_t sub_1800053b0(int64_t arg1, void* arg2)
{
    /* tailcall */
    return j_sub_180002590(*(arg2 + 0x100) + 0x90);
}

int64_t sub_1800053c3(int64_t arg1, void* arg2)
{
    /* tailcall */
    return j_sub_180002590(*(arg2 + 0x100) + 0xd0);
}

int64_t sub_1800053d6(int64_t arg1, void* arg2)
{
    /* tailcall */
    return j_sub_180002590(*(arg2 + 0x100) + 0x110);
}

int64_t sub_1800053e9(int64_t arg1, void* arg2)
{
    /* tailcall */
    return sub_180002cc0(*(arg2 + 0x100) + 0x150);
}

int64_t std::basic_ios<char,struct std::char_traits<char> >::init::dtor$0::dtor$0(int64_t arg1, void* arg2)
{
    /* tailcall */
    return sub_1800040c0(arg2 + 0x40);
}

int64_t std::num_put<wchar_t,class std::ostreambuf_iterator<wchar_t,struct std::char_traits<wchar_t> > >::_Fput::dtor$0::dtor$0(int64_t arg1, void* arg2)
{
    /* tailcall */
    return sub_1800011e0(arg2 + 0x30);
}

int64_t std::num_put<char,class std::ostreambuf_iterator<char,struct std::char_traits<char> > >::_Fput::dtor$2::dtor$2(int64_t arg1, void* arg2)
{
    /* tailcall */
    return sub_1800040c0(arg2 + 0x40);
}

int64_t Concurrency::agent::cancel::dtor$1::dtor$1(int64_t arg1, void* arg2)
{
    /* tailcall */
    return sub_1800011e0(arg2 + 0x30);
}

int64_t Concurrency::agent::done::dtor$1::dtor$1(int64_t arg1, void* arg2)
{
    /* tailcall */
    return sub_180002f20(arg2 + 0x30);
}

int64_t Concurrency::details::Mailbox<class Concurrency::details::_UnrealizedChore>::Segment::dtor$0::dtor$0::dtor$0(int64_t arg1, void* arg2)
{
    /* tailcall */
    return sub_180002e60(*(arg2 + 0x30) + 8);
}

int64_t std::basic_iostream<char,struct std::char_traits<char> >::dtor$1::dtor$1::dtor$1(int64_t arg1, void* arg2)
{
    /* tailcall */
    return sub_180002cc0(*(arg2 + 0x30) + 0x18);
}

int64_t Concurrency::details::_Originator::_send<enum Concurrency::agent_status>::dtor$2::dtor$2(int64_t arg1, void* arg2)
{
    /* tailcall */
    return sub_180003b90(arg2 + 0x20);
}

int64_t Concurrency::details::_Originator::_send<uint64_t>::dtor$2::dtor$2(int64_t arg1, void* arg2)
{
    /* tailcall */
    return sub_180003b50(arg2 + 0x20);
}

int64_t int `private: void __cdecl std::shared_ptr<class __ExceptionPtr>::_Resetp<class __ExceptionPtr, void (__cdecl *)(class __ExceptionPtr *), class _DebugMallocator<int>>(class __ExceptionPtr *, void (__cdecl *)(class __ExceptionPtr *), class _DebugMallocator<int>)'::`1'::catch$0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t* rdx = *(arg2 + 0x60);
    std::ios::setstate(*(*rdx + 4) + rdx, 4, 1);
    return 0;
}

int64_t Concurrency::task_completion_event<uint8_t>::set::dtor$0::dtor$0(int64_t arg1, void* arg2)
{
    /* tailcall */
    return sub_180003b30(arg2 + 0x20);
}

int64_t Concurrency::details::_JoinAllTokens_Add::dtor$1::dtor$1(int64_t arg1, void* arg2)
{
    /* tailcall */
    return sub_180003b30(arg2 + 0x20);
}

uint64_t __scrt_is_nonwritable_in_current_image$filt$0(int64_t* arg1)
{
    int32_t rcx;
    rcx = **arg1 == 0xc0000005;
    return rcx;
}

int64_t dllmain_crt_process_attach::fin$0::fin$0(char arg1, void* arg2)
{
    /* tailcall */
    return __scrt_release_startup_lock(*(arg2 + 0x40));
}

int64_t dllmain_crt_process_detach::fin$0::fin$0(char arg1, void* arg2)
{
    return __scrt_release_startup_lock(*(arg2 + 0x20));
}

int64_t _onexit$fin$0()
{
    /* tailcall */
    return __scrt_dllmain_uninitialize_critical();
}

int64_t dllmain_dispatch::filt$0::filt$0(int64_t* arg1, void* arg2)
{
    return __scrt_dllmain_exception_filter(*(arg2 + 0x60), *(arg2 + 0x68), *(arg2 + 0x70), dllmain_crt_dispatch, **arg1, arg1);
}

int64_t sub_180005570()
{
    void* rcx = data_1800098c8;
    
    if (!rcx)
        goto label_1800055ca;
    
    if (*(data_1800098d0 + 8) - rcx < 0x1000)
        goto label_1800055b3;
    
    void* r8_1 = *(rcx - 8);
    
    if (rcx - r8_1 - 8 <= 0x1f)
    {
        rcx = r8_1;
        label_1800055b3:
        sub_180004190(rcx);
        __builtin_memset(&data_1800098c8, 0, 0x18);
        label_1800055ca:
        void* rcx_3 = data_1800098b0;
        
        if (!rcx_3)
            goto label_180005626;
        
        if (((data_1800098c0 - rcx_3) & 0xfffffffffffffff8) < 0x1000)
            goto label_180005605;
        
        void* r8_2 = *(rcx_3 - 8);
        
        if (rcx_3 - r8_2 - 8 <= 0x1f)
        {
            rcx_3 = r8_2;
            label_180005605:
            sub_180004190(rcx_3);
            __builtin_memset(&data_1800098b0, 0, 0x18);
            label_180005626:
            sub_180002590(&data_180009870);
            sub_180002590(&data_180009830);
            sub_180002590(&data_1800097f0);
            sub_180002590(&data_1800097b0);
            /* tailcall */
            return sub_180002590(&data_180009770);
        }
    }
    
    _invalid_parameter_noinfo_noreturn();
    /* no return */
}

